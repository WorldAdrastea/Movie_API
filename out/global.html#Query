<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Class: Query</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Class: Query</h1>

    




<section>

<header>
    
        <h2><span class="attribs"><span class="type-signature"></span></span>Query<span class="signature">()</span><span class="type-signature"></span></h2>
        
    
</header>

<article>
    <div class="container-overview">
    
        

    

    
    <h4 class="name" id="Query"><span class="type-signature"></span>new Query<span class="signature">()</span><span class="type-signature"></span></h4>
    

    















<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongodb_lib_cmap_commands.js.html">node_modules/mongodb/lib/cmap/commands.js</a>, <a href="node_modules_mongodb_lib_cmap_commands.js.html#line28">line 28</a>
    </li></ul></dd>
    

    

    

    
</dl>




















    
    </div>

    

    

    

    

    

    

    
        <h3 class="subsection-title">Members</h3>

        
            
<h4 class="name" id="findOneAndRemove"><span class="type-signature"></span>findOneAndRemove<span class="type-signature"></span></h4>




<div class="description">
    Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.

Finds a matching document, removes it, returning the found document (if any).

#### Available options

- `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update

#### Examples:

    await A.where().findOneAndRemove(conditions, options) // executes
    A.where().findOneAndRemove(conditions, options)  // return Query
    await A.where().findOneAndRemove(conditions) // executes
    A.where().findOneAndRemove(conditions) // returns Query
    await A.where().findOneAndRemove()   // executes
    A.where().findOneAndRemove()           // returns Query
    A.where().findOneAndDelete()           // alias of .findOneAndRemove()
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2357">line 2357</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command</li>
        </ul>
    </dd>
    

    
</dl>






        
            
<h4 class="name" id="model"><span class="type-signature"></span>model<span class="type-signature"></span></h4>




<div class="description">
    The model this query is associated with.

#### Example:

    const q = MyModel.find();
    q.model === MyModel; // true
</div>







    <h5 class="subsection-title">Properties:</h5>

    

<table class="props">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>model</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>




<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5413">line 5413</a>
    </li></ul></dd>
    

    

    

    
</dl>






        
            
<h4 class="name" id="read"><span class="type-signature"></span>read<span class="type-signature"></span></h4>




<div class="description">
    Sets the readPreference option for the query.

#### Example:

    new Query().read('primary')
    new Query().read('p')  // same as primary

    new Query().read('primaryPreferred')
    new Query().read('pp') // same as primaryPreferred

    new Query().read('secondary')
    new Query().read('s')  // same as secondary

    new Query().read('secondaryPreferred')
    new Query().read('sp') // same as secondaryPreferred

    new Query().read('nearest')
    new Query().read('n')  // same as nearest

    // you can also use mongodb.ReadPreference class to also specify tags
    new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))

    new Query().setReadPreference('primary') // alias of .read()

#### Preferences:

    primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.
    secondary            Read from secondary if available, otherwise error.
    primaryPreferred     Read from primary if available, otherwise a secondary.
    secondaryPreferred   Read from a secondary if available, otherwise read from the primary.
    nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.

Aliases

    p   primary
    pp  primaryPreferred
    s   secondary
    sp  secondaryPreferred
    n   nearest

Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1603">line 1603</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference</li>
        
            <li>driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences</li>
        </ul>
    </dd>
    

    
</dl>






        
            
<h4 class="name" id="readConcern"><span class="type-signature"></span>readConcern<span class="type-signature"></span></h4>




<div class="description">
    Sets the readConcern option for the query.

#### Example:

    new Query().readConcern('local')
    new Query().readConcern('l')  // same as local

    new Query().readConcern('available')
    new Query().readConcern('a')  // same as available

    new Query().readConcern('majority')
    new Query().readConcern('m')  // same as majority

    new Query().readConcern('linearizable')
    new Query().readConcern('lz') // same as linearizable

    new Query().readConcern('snapshot')
    new Query().readConcern('s')  // same as snapshot

    new Query().r('s') // r is alias of readConcern


#### Read Concern Level:

    local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).
    available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).
    majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.
    linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.
    snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern "majority", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.

Aliases

    l   local
    a   available
    m   majority
    lz  linearizable
    s   snapshot

Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).
</div>







<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1659">line 1659</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://docs.mongodb.com/manual/reference/read-concern/</li>
        </ul>
    </dd>
    

    
</dl>






        
            
<h4 class="name" id=".use$geoWithin"><span class="type-signature">(static) </span>use$geoWithin<span class="type-signature"></span></h4>




<div class="description">
    Flag to opt out of using `$geoWithin`.

```javascript
mongoose.Query.use$geoWithin = false;
```

MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.
</div>







    <h5 class="subsection-title">Properties:</h5>

    

<table class="props">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>use$geoWithin</code></td>
            

            <td class="type">
            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>




<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-default">Default Value:</dt>
    <dd class="tag-default"><ul class="dummy">
            <li>true</li>
        </ul></dd>
    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line173">line 173</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>geoWithin https://www.mongodb.com/docs/manual/reference/operator/geoWithin/</li>
        </ul>
    </dd>
    

    
</dl>






        
    

    
        <h3 class="subsection-title">Methods</h3>

        
            

    

    
    <h4 class="name" id="$where"><span class="type-signature"></span>$where<span class="signature">(js)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a javascript function or expression to pass to MongoDBs query system.

#### Example:

    query.$where('this.comments.length === 10 || this.name.length === 5')

    // or

    query.$where(function () {
      return this.comments.length === 10 || this.name.length === 5;
    })

#### Note:

Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.
**Be sure to read about all of [its caveats](https://www.mongodb.com/docs/manual/reference/operator/where/) before using.**
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>js</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last">javascript string or function</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line302">line 302</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$where https://www.mongodb.com/docs/manual/reference/operator/where/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="__distinct"><span class="type-signature"></span>__distinct<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a `distinct()` query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2778">line 2778</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>distinct https://www.mongodb.com/docs/manual/reference/method/db.collection.distinct/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_applyPaths"><span class="type-signature"></span>_applyPaths<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Applies schematype selected options to this query.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4869">line 4869</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_castConditions"><span class="type-signature"></span>_castConditions<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    ignore
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2154">line 2154</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_castFields"><span class="type-signature"></span>_castFields<span class="signature">(fields)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Casts selected field arguments for field selection with mongo 2.2

    query.select({ ids: { $elemMatch: { $in: [hexString] }})
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fields</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4821">line 4821</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="https://github.com/Automattic/mongoose/issues/1091">https://github.com/Automattic/mongoose/issues/1091</a></li>
        
            <li><a href="https://www.mongodb.com/docs/manual/reference/projection/elemMatch/">https://www.mongodb.com/docs/manual/reference/projection/elemMatch/</a></li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_castUpdate"><span class="type-signature"></span>_castUpdate<span class="signature">(obj, overwrite)</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Casts obj for an update command.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>obj</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>overwrite</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4554">line 4554</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    obj after casting its values
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="_completeOne"><span class="type-signature"></span>_completeOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2404">line 2404</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_count"><span class="type-signature"></span>_count<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a count query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2561">line 2561</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>count https://www.mongodb.com/docs/manual/reference/method/db.collection.count/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_count"><span class="type-signature"></span>_count<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `count` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1980">line 1980</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_countDocuments"><span class="type-signature"></span>_countDocuments<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a countDocuments query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2588">line 2588</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>countDocuments https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_deleteMany"><span class="type-signature"></span>_deleteMany<span class="signature">(callback)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a `deleteMany()` query
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>callback</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3007">line 3007</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_deleteMany"><span class="type-signature"></span>_deleteMany<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `deleteMany` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2255">line 2255</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_deleteOne"><span class="type-signature"></span>_deleteOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Internal thunk for `deleteOne()`
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2931">line 2931</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_deleteOne"><span class="type-signature"></span>_deleteOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `deleteOne` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2217">line 2217</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_distinct"><span class="type-signature"></span>_distinct<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `distinct` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2032">line 2032</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_ensurePath"><span class="type-signature"></span>_ensurePath<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Make sure _path is set.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2630">line 2630</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_estimatedDocumentCount"><span class="type-signature"></span>_estimatedDocumentCount<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a estimatedDocumentCount() query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2615">line 2615</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#estimatedDocumentCount</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_fieldsForExec"><span class="type-signature"></span>_fieldsForExec<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns fields selection for this query.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2579">line 2579</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="_find"><span class="type-signature"></span>_find<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Execute a `find()`
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2202">line 2202</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="_find"><span class="type-signature"></span>_find<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `find` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1850">line 1850</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the result
</div>



    





        
            

    

    
    <h4 class="name" id="_findOne"><span class="type-signature"></span>_findOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Internal helper to execute a findOne() operation
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2464">line 2464</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>findOne https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_findOne"><span class="type-signature"></span>_findOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `findOne` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1930">line 1930</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_findOneAndRemove"><span class="type-signature"></span>_findOneAndRemove<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Execute a `findOneAndRemove`. Alias for `findOneAndDelete`
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3632">line 3632</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="_findOneAndRemove"><span class="type-signature"></span>_findOneAndRemove<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `findOneAndRemove` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2376">line 2376</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_findOneAndReplace"><span class="type-signature"></span>_findOneAndReplace<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Execute a findOneAndReplace() query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3528">line 3528</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="_findOneAndUpdate"><span class="type-signature"></span>_findOneAndUpdate<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `findOneAndUpdate` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2323">line 2323</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_mergeUpdate"><span class="type-signature"></span>_mergeUpdate<span class="signature">(doc)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Override mquery.prototype._mergeUpdate to handle mongoose objects in
updates.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3728">line 3728</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_mergeUpdate"><span class="type-signature"></span>_mergeUpdate<span class="signature">(doc)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Merges `doc` with the current update object.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2549">line 2549</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_optionsForExec"><span class="type-signature"></span>_optionsForExec<span class="signature">(model)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Returns default options for this query.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>model</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Model">Model</a></span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1920">line 1920</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_optionsForExec"><span class="type-signature"></span>_optionsForExec<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns default options.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2567">line 2567</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="_replaceOne"><span class="type-signature"></span>_replaceOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a replaceOne query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3884">line 3884</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Model.replaceOne #model_Model-replaceOne</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_replaceOne"><span class="type-signature"></span>_replaceOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `replaceOne` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2147">line 2147</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_unsetCastError"><span class="type-signature"></span>_unsetCastError<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    ignore
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2113">line 2113</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_updateForExec"><span class="type-signature"></span>_updateForExec<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Return an update document with corrected $set operations.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2589">line 2589</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_updateMany"><span class="type-signature"></span>_updateMany<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute an updateMany query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3858">line 3858</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Model.update #model_Model-update</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_updateMany"><span class="type-signature"></span>_updateMany<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `updateMany` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2076">line 2076</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="_updateOne"><span class="type-signature"></span>_updateOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute an updateOne query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3871">line 3871</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Model.update #model_Model-update</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="_updateOne"><span class="type-signature"></span>_updateOne<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes a `updateOne` Query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2111">line 2111</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the results
</div>



    





        
            

    

    
    <h4 class="name" id="all"><span class="type-signature"></span>all<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies an `$all` query condition.

When called with one argument, the most recent path passed to `where()` is used.

#### Example:

    MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);
    // Equivalent:
    MyModel.find().all('pets', ['dog', 'cat', 'ferret']);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line626">line 626</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$all https://www.mongodb.com/docs/manual/reference/operator/all/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="allowDiskUse"><span class="type-signature"></span>allowDiskUse<span class="signature">(v<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the [`allowDiskUse` option](https://www.mongodb.com/docs/manual/reference/method/cursor.allowDiskUse/),
which allows the MongoDB server to use more than 100 MB for this query's `sort()`. This option can
let you work around `QueryExceededMemoryLimitNoDiskUseAllowed` errors from the MongoDB server.

Note that this option requires MongoDB server >= 4.4. Setting this option is a no-op for MongoDB 4.2
and earlier.

Calling `query.allowDiskUse(v)` is equivalent to `query.setOptions({ allowDiskUse: v })`

#### Example:

    await query.find().sort({ name: 1 }).allowDiskUse(true);
    // Equivalent:
    await query.find().sort({ name: 1 }).allowDiskUse();
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>v</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">Enable/disable `allowDiskUse`. If called with 0 arguments, sets `allowDiskUse: true`</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1694">line 1694</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="and"><span class="type-signature"></span>and<span class="signature">(array)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies arguments for a `$and` condition.

#### Example:

    query.and([{ color: 'green' }, { status: 'ok' }])
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last">array of conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line505">line 505</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$and https://www.mongodb.com/docs/manual/reference/operator/and/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="and"><span class="type-signature"></span>and<span class="signature">(array)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies arguments for a `$and` condition.

#### Example:

    query.and([{ color: 'green' }, { status: 'ok' }])
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last">array of conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line393">line 393</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$and http://docs.mongodb.org/manual/reference/operator/and/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="batchSize"><span class="type-signature"></span>batchSize<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the batchSize option.

#### Example:

    query.batchSize(100)

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line900">line 900</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>batchSize https://www.mongodb.com/docs/manual/reference/method/cursor.batchSize/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="box"><span class="type-signature"></span>box<span class="signature">(val1, val2<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$box` condition

#### Example:

    const lowerLeft = [40.73083, -73.99756]
    const upperRight= [40.741404,  -73.988135]

    query.where('loc').within().box(lowerLeft, upperRight)
    query.box({ ll : lowerLeft, ur : upperRight })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val1</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">Array:<a href="global.html"></a>.&lt;Number:<a href="global.html"></a>></span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">Lower Left Coordinates OR a object of lower-left(ll) and upper-right(ur) Coordinates</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val2</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array:<a href="global.html"></a>.&lt;Number:<a href="global.html"></a>></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">Upper Right Coordinates</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5236">line 5236</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$box https://www.mongodb.com/docs/manual/reference/operator/box/</li>
        
            <li>within() Query#within #query_Query-within</li>
        
            <li>MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="box"><span class="type-signature"></span>box<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    this is needed to support the mongoose syntax of:
box(field, { ll : [x,y], ur : [x2,y2] })
box({ ll : [x,y], ur : [x2,y2] })
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5259">line 5259</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="box"><span class="type-signature"></span>box<span class="signature">(path, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a $box condition

#### Example:

    var lowerLeft = [40.73083, -73.99756]
    var upperRight= [40.741404,  -73.988135]

    query.where('loc').within().box(lowerLeft, upperRight)
    query.box('loc', lowerLeft, upperRight )
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line787">line 787</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>
        
            <li>Query#within #query_Query-within</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="canMerge"><span class="type-signature"></span>canMerge<span class="signature">(conds)</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if `conds` can be merged using `mquery().merge()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>conds</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1902">line 1902</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="cast"><span class="type-signature"></span>cast<span class="signature">(model<span class="signature-attributes">opt</span>, obj<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Casts this query to the schema of `model`

#### Note:

If `obj` is present, it is cast instead of this query.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>model</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Model">Model</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the model to cast to. If not set, defaults to `this.model`</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>obj</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4779">line 4779</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="catch"><span class="type-signature"></span>catch<span class="signature">(reject<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Executes the query returning a `Promise` which will be
resolved with either the doc(s) or rejected with the error.
Like `.then()`, but only takes a rejection handler.

More about [Promise `catch()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/catch).
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>reject</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4464">line 4464</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="center"><span class="type-signature"></span>center<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    _DEPRECATED_ Alias for [circle](#query_Query-circle)

**Deprecated.** Use [circle](#query_Query-circle) instead.
</div>













<dl class="details">

    

    

    

    

    

    

    

    
        <dt class="important tag-deprecated">Deprecated:</dt><dd class="yes-def tag-deprecated"><ul class="dummy"><li>Yes</li></ul></dd>
    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5307">line 5307</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="centerSphere"><span class="type-signature"></span>centerSphere<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    _DEPRECATED_ Specifies a `$centerSphere` condition

**Deprecated.** Use [circle](#query_Query-circle) instead.

#### Example:

    const area = { center: [50, 50], radius: 10 };
    query.where('loc').within().centerSphere(area);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    
        <dt class="important tag-deprecated">Deprecated:</dt><dd class="yes-def tag-deprecated"><ul class="dummy"><li>Yes</li></ul></dd>
    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5340">line 5340</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/</li>
        
            <li>$centerSphere https://www.mongodb.com/docs/manual/reference/operator/centerSphere/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="circle"><span class="type-signature"></span>circle<span class="signature">(path<span class="signature-attributes">opt</span>, area)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$center` or `$centerSphere` condition.

#### Example:

    const area = { center: [50, 50], radius: 10, unique: true }
    query.where('loc').within().circle(area)
    // alternatively
    query.circle('loc', area);

    // spherical calculations
    const area = { center: [50, 50], radius: 10, unique: true, spherical: true }
    query.where('loc').within().circle(area)
    // alternatively
    query.circle('loc', area);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>area</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5278">line 5278</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$center https://www.mongodb.com/docs/manual/reference/operator/center/</li>
        
            <li>$centerSphere https://www.mongodb.com/docs/manual/reference/operator/centerSphere/</li>
        
            <li>$geoWithin https://www.mongodb.com/docs/manual/reference/operator/geoWithin/</li>
        
            <li>MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="circle"><span class="type-signature"></span>circle<span class="signature">(path<span class="signature-attributes">opt</span>, area)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a $center or $centerSphere condition.

#### Example:

    var area = { center: [50, 50], radius: 10, unique: true }
    query.where('loc').within().circle(area)
    query.center('loc', area);

    // for spherical calculations
    var area = { center: [50, 50], radius: 10, unique: true, spherical: true }
    query.where('loc').within().circle(area)
    query.center('loc', area);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>area</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line863">line 863</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="clone"><span class="type-signature"></span>clone<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Make a copy of this query so you can re-execute it.

#### Example:

    const q = Book.findOne({ title: 'Casino Royale' });
    await q.exec();
    await q.exec(); // Throws an error because you can't execute a query twice

    await q.clone().exec(); // Works
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line253">line 253</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    copy
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="collation"><span class="type-signature"></span>collation<span class="signature">(value)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Adds a collation to this op (MongoDB 3.4 and up)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>value</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2390">line 2390</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>MongoDB docs https://www.mongodb.com/docs/manual/reference/method/cursor.collation/#cursor.collation</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="collation"><span class="type-signature"></span>collation<span class="signature">(value)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Adds a collation to this op (MongoDB 3.4 and up)

#### Example:

    query.find().collation({ locale: "en_US", strength: 1 })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>value</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line211">line 211</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="collection"><span class="type-signature"></span>collection<span class="signature">(coll)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets this Querys collection.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>coll</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Collection">Collection</a></span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line192">line 192</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="comment"><span class="type-signature"></span>comment<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the `comment` option.

#### Example:

    query.comment('login query')

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line919">line 919</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>comment https://www.mongodb.com/docs/manual/reference/operator/comment/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="count"><span class="type-signature"></span>count<span class="signature">(filter<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies this query as a `count` query.

This method is deprecated. If you want to count the number of documents in
a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](#query_Query-estimatedDocumentCount)
instead. Otherwise, use the [`countDocuments()`](#query_Query-countDocuments) function instead.

This function triggers the following middleware.

- `count()`

#### Example:

    const countQuery = model.where({ 'color': 'black' }).count();

    query.count({ color: 'black' }).count().exec();

    await query.count({ color: 'black' });

    query.where('color', 'black').count();
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">count documents that match this object</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    
        <dt class="important tag-deprecated">Deprecated:</dt><dd class="yes-def tag-deprecated"><ul class="dummy"><li>Yes</li></ul></dd>
    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2653">line 2653</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>count https://www.mongodb.com/docs/manual/reference/method/db.collection.count/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="count"><span class="type-signature"></span>count<span class="signature">(criteria<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Exectues the query as a count() operation.

#### Example:

    query.count().where('color', 'black').exec();

    query.count({ color: 'black' })

    await query.count({ color: 'black' });

    const doc = await query.where('color', 'black').count();
    console.log('there are %d kittens', count);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1965">line 1965</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="countDocuments"><span class="type-signature"></span>countDocuments<span class="signature">(filter<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies this query as a `countDocuments()` query. Behaves like `count()`,
except it always does a full collection scan when passed an empty filter `{}`.

There are also minor differences in how `countDocuments()` handles
[`$where` and a couple geospatial operators](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).
versus `count()`.

This function triggers the following middleware.

- `countDocuments()`

#### Example:

    const countQuery = model.where({ 'color': 'black' }).countDocuments();

    query.countDocuments({ color: 'black' }).count().exec();

    await query.countDocuments({ color: 'black' });

    query.where('color', 'black').countDocuments().exec();

The `countDocuments()` function is similar to `count()`, but there are a
[few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments).
Below are the operators that `count()` supports but `countDocuments()` does not,
and the suggested replacement:

- `$where`: [`$expr`](https://www.mongodb.com/docs/manual/reference/operator/query/expr/)
- `$near`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$center`](https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center)
- `$nearSphere`: [`$geoWithin`](https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2748">line 2748</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>countDocuments https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#countDocuments</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="cursor"><span class="type-signature"></span>cursor<span class="signature">(options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="QueryCursor.html">QueryCursor</a>}</span></h4>
    

    



<div class="description">
    Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html).
A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.

The `.cursor()` function triggers pre find hooks, but **not** post find hooks.

#### Example:

    // There are 2 ways to use a cursor. First, as a stream:
    Thing.
      find({ name: /^hello/ }).
      cursor().
      on('data', function(doc) { console.log(doc); }).
      on('end', function() { console.log('Done!'); });

    // Or you can use `.next()` to manually get the next doc in the stream.
    // `.next()` returns a promise, so you can use promises or callbacks.
    const cursor = Thing.find({ name: /^hello/ }).cursor();
    cursor.next(function(error, doc) {
      console.log(doc);
    });

    // Because `.next()` returns a promise, you can use co
    // to easily iterate through all documents without loading them
    // all into memory.
    const cursor = Thing.find({ name: /^hello/ }).cursor();
    for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {
      console.log(doc);
    }

#### Valid options

  - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4927">line 4927</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>QueryCursor /docs/api/querycursor.html</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="QueryCursor.html">QueryCursor</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="cursor"><span class="type-signature"></span>cursor<span class="signature">(criteria<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns the query cursor

#### Examples:

    query.find().cursor();
    query.cursor({ name: 'Burning Lights' });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1878">line 1878</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    cursor
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="cursor"><span class="type-signature"></span>cursor<span class="signature">()</span><span class="type-signature"> &rarr; {Cursor}</span></h4>
    

    



<div class="description">
    Returns a cursor for the given `find` query.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2459">line 2459</a>
    </li></ul></dd>
    

    

    

    
</dl>













<h5>Throws:</h5>

        

    <div class="param-desc">
    
        Error if operation is not a find
    
    </div>


    


<h5>Returns:</h5>

        
<div class="param-desc">
    MongoDB driver cursor
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Cursor</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="deleteMany"><span class="type-signature"></span>deleteMany<span class="signature">(filter<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as a `deleteMany()` operation. Works like
remove, except it deletes _every_ document that matches `filter` in the
collection, regardless of the value of `single`.

This function triggers `deleteMany` middleware.

#### Example:

    await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });

This function calls the MongoDB driver's [`Collection#deleteMany()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteMany).
The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an
object that contains 3 properties:

- `ok`: `1` if no errors occurred
- `deletedCount`: the number of documents deleted
- `n`: the number of documents deleted. Equal to `deletedCount`.

#### Example:

    const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });
    // `0` if no docs matched the filter, number of docs deleted otherwise
    res.deletedCount;
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">optional see [`Query.prototype.setOptions()`](#query_Query-setOptions)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2985">line 2985</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>DeleteResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/DeleteResult.html</li>
        
            <li>deleteMany https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteMany</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="deleteMany"><span class="type-signature"></span>deleteMany<span class="signature">(criteria<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as a `deleteMany()` operation. Always deletes
_every_ document that matches `criteria`.

#### Example:

    await mquery(collection).deleteMany({ artist: 'Anne Murray' })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2241">line 2241</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="deleteOne"><span class="type-signature"></span>deleteOne<span class="signature">(filter<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as a `deleteOne()` operation. Works like
remove, except it deletes at most one document regardless of the `single`
option.

This function triggers `deleteOne` middleware.

#### Example:

    await Character.deleteOne({ name: 'Eddard Stark' });

This function calls the MongoDB driver's [`Collection#deleteOne()` function](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteOne).
The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an
object that contains 3 properties:

- `ok`: `1` if no errors occurred
- `deletedCount`: the number of documents deleted
- `n`: the number of documents deleted. Equal to `deletedCount`.

#### Example:

    const res = await Character.deleteOne({ name: 'Eddard Stark' });
    // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`
    res.deletedCount;
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">optional see [`Query.prototype.setOptions()`](#query_Query-setOptions)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2909">line 2909</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>DeleteResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/DeleteResult.html</li>
        
            <li>deleteOne https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#deleteOne</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="deleteOne"><span class="type-signature"></span>deleteOne<span class="signature">(criteria<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as a `deleteOne()` operation.

#### Example:

    await mquery(collection).deleteOne({ artist: 'Anne Murray' })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2203">line 2203</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="distinct"><span class="type-signature"></span>distinct<span class="signature">(field<span class="signature-attributes">opt</span>, filter<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declares or executes a distinct() operation.

This function does not trigger any middleware.

#### Example:

    distinct(field, conditions)
    distinct(field)
    distinct()
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>field</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2812">line 2812</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>distinct https://www.mongodb.com/docs/manual/reference/method/db.collection.distinct/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="distinct"><span class="type-signature"></span>distinct<span class="signature">(criteria<span class="signature-attributes">opt</span>, field<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declares or executes a distinct() operation.

#### Example:

    await distinct(criteria, field)
    distinct(criteria, field)
    await distinct(field)
    distinct(field)
    await distinct()
    distinct()
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>field</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2008">line 2008</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="elemMatch"><span class="type-signature"></span>elemMatch<span class="signature">(path, filter)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies an `$elemMatch` condition

#### Example:

    query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})

    query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})

    query.elemMatch('comment', function (elem) {
      elem.where('author').equals('autobot');
      elem.where('votes').gte(5);
    })

    query.where('comment').elemMatch(function (elem) {
      elem.where({ author: 'autobot' });
      elem.where('votes').gte(5);
    })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Object</span>
|

<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line765">line 765</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$elemMatch https://www.mongodb.com/docs/manual/reference/operator/elemMatch/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="elemMatch"><span class="type-signature"></span>elemMatch<span class="signature">(path, criteria)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies an `$elemMatch` condition

#### Example:

    query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})

    query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})

    query.elemMatch('comment', function (elem) {
      elem.where('author').equals('autobot');
      elem.where('votes').gte(5);
    })

    query.where('comment').elemMatch(function (elem) {
      elem.where({ author: 'autobot' });
      elem.where('votes').gte(5);
    })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Object</span>
|

<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line670">line 670</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="eq"><span class="type-signature"></span>eq<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies the complementary comparison value for paths specified with `where()`
This is alias of `equals`

#### Example:

    User.where('age').eq(49);

    // is the same as

    User.shere('age').equals(49);

    // is the same as

    User.where('age', 49);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line335">line 335</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="equals"><span class="type-signature"></span>equals<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies the complementary comparison value for paths specified with `where()`

#### Example:

    User.where('age').equals(49);

    // is the same as

    User.where('age', 49);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line454">line 454</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="equals"><span class="type-signature"></span>equals<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies the complementary comparison value for paths specified with `where()`

#### Example:

    User.where('age').equals(49);

    // is the same as

    User.where('age', 49);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line307">line 307</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="error"><span class="type-signature"></span>error<span class="signature">(err)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Gets/sets the error flag on this query. If this flag is not null or
undefined, the `exec()` promise will reject without executing.

#### Example:

    Query().error(); // Get current error value
    Query().error(null); // Unset the current error
    Query().error(new Error('test')); // `exec()` will resolve with test
    Schema.pre('find', function() {
      if (!this.getQuery().userId) {
        this.error(new Error('Not allowed to query without setting userId'));
      }
    });

Note that query casting runs **after** hooks, so cast errors will override
custom errors.

#### Example:

    const TestSchema = new Schema({ num: Number });
    const TestModel = db.model('Test', TestSchema);
    TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {
      // `error` will be a cast error because `num` failed to cast
    });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>err</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Error">Error</a></span>
|

<span class="param-type">null</span>


            
            </td>

            

            

            <td class="description last">if set, `exec()` will fail fast before sending the query to MongoDB</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2104">line 2104</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="estimatedDocumentCount"><span class="type-signature"></span>estimatedDocumentCount<span class="signature">(options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies this query as a `estimatedDocumentCount()` query. Faster than
using `countDocuments()` for large collections because
`estimatedDocumentCount()` uses collection metadata rather than scanning
the entire collection.

`estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`
is equivalent to `Model.find().estimatedDocumentCount()`

This function triggers the following middleware.

- `estimatedDocumentCount()`

#### Example:

    await Model.find().estimatedDocumentCount();
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">passed transparently to the [MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/EstimatedDocumentCountOptions.html)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2694">line 2694</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>estimatedDocumentCount https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#estimatedDocumentCount</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="exec"><span class="type-signature"></span>exec<span class="signature">(operation<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Executes the query

#### Example:

    const promise = query.exec();
    const promise = query.exec('update');
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>operation</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4281">line 4281</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="exec"><span class="type-signature"></span>exec<span class="signature">(operation<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Executes the query

#### Examples:

    query.exec();
    await query.exec();
    query.exec('update');
    await query.exec('find');
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>operation</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2421">line 2421</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="exists"><span class="type-signature"></span>exists<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies an `$exists` condition

#### Example:

    // { name: { $exists: true }}
    Thing.where('name').exists()
    Thing.where('name').exists(true)
    Thing.find().exists('name')

    // { name: { $exists: false }}
    Thing.where('name').exists(false);
    Thing.find().exists('name', false);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line741">line 741</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$exists https://www.mongodb.com/docs/manual/reference/operator/exists/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="exists"><span class="type-signature"></span>exists<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies an `$exists` condition

#### Example:

    // { name: { $exists: true }}
    Thing.where('name').exists()
    Thing.where('name').exists(true)
    Thing.find().exists('name')

    // { name: { $exists: false }}
    Thing.where('name').exists(false);
    Thing.find().exists('name', false);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line619">line 619</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="explain"><span class="type-signature"></span>explain<span class="signature">(verbose<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the [`explain` option](https://www.mongodb.com/docs/manual/reference/method/cursor.explain/),
which makes this query return detailed execution stats instead of the actual
query result. This method is useful for determining what index your queries
use.

Calling `query.explain(v)` is equivalent to `query.setOptions({ explain: v })`

#### Example:

    const query = new Query();
    const res = await query.find({ a: 1 }).explain('queryPlanner');
    console.log(res);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>verbose</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1662">line 1662</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="finally"><span class="type-signature"></span>finally<span class="signature">(onFinally<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Executes the query returning a `Promise` which will be
resolved with `.finally()` chained.

More about [Promise `finally()` in JavaScript](https://thecodebarbarian.com/using-promise-finally-in-node-js.html).
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>onFinally</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4479">line 4479</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="find"><span class="type-signature"></span>find<span class="signature">(filter<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Find all documents that match `selector`. The result will be an array of documents.

If there are too many documents in the result to fit in memory, use
[`Query.prototype.cursor()`](#query_Query-cursor)

#### Example:

    const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#ObjectId">ObjectId</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb filter. If not specified, returns all documents.</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2282">line 2282</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="find"><span class="type-signature"></span>find<span class="signature">(criteria<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Finds documents.

#### Example:

    query.find()
    await query.find()
    await query.find({ name: 'Burning Lights' })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1836">line 1836</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="findOne"><span class="type-signature"></span>findOne<span class="signature">(filter<span class="signature-attributes">opt</span>, projection<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declares the query a findOne operation. When executed, the first found document is passed to the callback.

The result of the query is a single document, or `null` if no document was found.

* *Note:* `conditions` is optional, and if `conditions` is null or undefined,
mongoose will send an empty `findOne` command to MongoDB, which will return
an arbitrary document. If you're querying by `_id`, use `Model.findById()`
instead.

This function triggers the following middleware.

- `findOne()`

#### Example:

    const query = Kitten.where({ color: 'white' });
    const kitten = await query.findOne();
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>projection</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">optional fields to return</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">see [`setOptions()`](#query_Query-setOptions)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2519">line 2519</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>findOne https://www.mongodb.com/docs/manual/reference/method/db.collection.findOne/</li>
        
            <li>Query.select #query_Query-select</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="findOne"><span class="type-signature"></span>findOne<span class="signature">(criteria<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Executes the query as a findOne() operation.

#### Example:

    query.findOne().where('name', /^Burning/);

    query.findOne({ name: /^Burning/ })

    await query.findOne({ name: /^Burning/ }); // executes
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">mongodb selector</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1916">line 1916</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="findOneAndRemove"><span class="type-signature"></span>findOneAndRemove<span class="signature">(conditions<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Legacy alias for `findOneAndDelete()`.

Finds a matching document, removes it, returns the found document (if any).

This function triggers the following middleware.

- `findOneAndRemove()`

#### Available options

- `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
- `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0
- `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)

#### Example:

    A.where().findOneAndRemove(conditions, options)  // return Query
    A.where().findOneAndRemove(conditions) // returns Query
    A.where().findOneAndRemove()           // returns Query
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>conditions</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>rawResult</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The session associated with this query. See [transactions docs](/docs/transactions.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3285">line 3285</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>findAndModify command https://www.mongodb.com/docs/manual/reference/command/findAndModify/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="findOneAndUpdate"><span class="type-signature"></span>findOneAndUpdate<span class="signature">(filter<span class="signature-attributes">opt</span>, doc<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Issues a mongodb `findOneAndUpdate()` command.

Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found
document (if any).

This function triggers the following middleware.

- `findOneAndUpdate()`

#### Available options

- `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)
- `upsert`: bool - creates the object if it doesn't exist. defaults to false.
- `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`
- `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
- `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0
- `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.
- `setDefaultsOnInsert`: `true` by default. If `setDefaultsOnInsert` and `upsert` are true, mongoose will apply the [defaults](https://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created.
- `rawResult`: if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)

#### Example:

    query.findOneAndUpdate(conditions, update, options)  // returns Query
    query.findOneAndUpdate(conditions, update)           // returns Query
    query.findOneAndUpdate(update)                       // returns Query
    query.findOneAndUpdate()                             // returns Query
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>rawResult</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The session associated with this query. See [transactions docs](/docs/transactions.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>multipleCastError</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>new</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>lean</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The session associated with this query. See [transactions docs](/docs/transactions.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>timestamps</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>returnOriginal</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3092">line 3092</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Tutorial /docs/tutorials/findoneandupdate.html</li>
        
            <li>findAndModify command https://www.mongodb.com/docs/manual/reference/command/findAndModify/</li>
        
            <li>ModifyResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html</li>
        
            <li>findOneAndUpdate https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#findOneAndUpdate</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="findOneAndUpdate"><span class="type-signature"></span>findOneAndUpdate<span class="signature">(query<span class="signature-attributes">opt</span>, doc<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.

Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any).

#### Available options

- `new`: bool - true to return the modified document rather than the original. defaults to true
- `upsert`: bool - creates the object if it doesn't exist. defaults to false.
- `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update

#### Examples:

    await query.findOneAndUpdate(conditions, update, options) // executes
    query.findOneAndUpdate(conditions, update, options)  // returns Query
    await query.findOneAndUpdate(conditions, update) // executes
    query.findOneAndUpdate(conditions, update)           // returns Query
    await query.findOneAndUpdate(update)             // returns Query
    query.findOneAndUpdate(update)                       // returns Query
    await query.findOneAndUpdate()                     // executes
    query.findOneAndUpdate()                             // returns Query
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>query</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type"><a href="global.html#Query">Query</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2296">line 2296</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="geometry"><span class="type-signature"></span>geometry<span class="signature">(object)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$geometry` condition

#### Example:

    const polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]
    query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })

    // or
    const polyB = [[ 0, 0 ], [ 1, 1 ]]
    query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })

    // or
    const polyC = [ 0, 0 ]
    query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })

    // or
    query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })

The argument is assigned to the most recent path passed to `where()`.

#### Note:

`geometry()` **must** come after either `intersects()` or `within()`.

The `object` argument must contain `type` and `coordinates` properties.
- type {String}
- coordinates {Array}
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>object</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5030">line 5030</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$geometry https://www.mongodb.com/docs/manual/reference/operator/geometry/</li>
        
            <li>Geospatial Support Enhancements https://www.mongodb.com/docs/manual/release-notes/2.4/#geospatial-support-enhancements</li>
        
            <li>MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="geometry"><span class="type-signature"></span>geometry<span class="signature">(object)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$geometry` condition

#### Example:

    var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]
    query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })

    // or
    var polyB = [[ 0, 0 ], [ 1, 1 ]]
    query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })

    // or
    var polyC = [ 0, 0 ]
    query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })

    // or
    query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })

#### Note:

`geometry()` **must** come after either `intersects()` or `within()`.

The `object` argument must contain `type` and `coordinates` properties.
- type {String}
- coordinates {Array}

The most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>object</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1053">line 1053</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry">http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry</a></li>
        
            <li><a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>
        
            <li>$geometry http://docs.mongodb.org/manual/reference/operator/geometry/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="get"><span class="type-signature"></span>get<span class="signature">(path)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    For update operations, returns the value of a path in the update's `$set`.
Useful for writing getters/setters that can work with both update operations
and `save()`.

#### Example:

    const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });
    query.get('name'); // 'Jean-Luc Picard'
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">path or object of key/value pairs to get</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2053">line 2053</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="getFilter"><span class="type-signature"></span>getFilter<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns the current query filter (also known as conditions) as a [POJO](https://masteringjs.io/tutorials/fundamentals/pojo).

#### Example:

    const query = new Query();
    query.find({ a: 1 }).where('b').gt(2);
    query.getFilter(); // { a: 1, b: { $gt: 2 } }
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1742">line 1742</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    current query filter
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="getOptions"><span class="type-signature"></span>getOptions<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Gets query options.

#### Example:

    const query = new Query();
    query.limit(10);
    query.setOptions({ maxTimeMS: 1000 });
    query.getOptions(); // { limit: 10, maxTimeMS: 1000 }
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1499">line 1499</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the options
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="getPopulatedPaths"><span class="type-signature"></span>getPopulatedPaths<span class="signature">()</span><span class="type-signature"> &rarr; {Array}</span></h4>
    

    



<div class="description">
    Gets a list of paths to be populated by this query

#### Example:

     bookSchema.pre('findOne', function() {
       let keys = this.getPopulatedPaths(); // ['author']
     });
     ...
     Book.findOne({}).populate('author');

#### Example:

     // Deep populate
     const q = L1.find().populate({
       path: 'level2',
       populate: { path: 'level3' }
     });
     q.getPopulatedPaths(); // ['level2', 'level2.level3']
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4739">line 4739</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    an array of strings representing populated paths
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Array</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="getQuery"><span class="type-signature"></span>getQuery<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns the current query filter. Equivalent to `getFilter()`.

You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`
will likely be deprecated in a future release.

#### Example:

    const query = new Query();
    query.find({ a: 1 }).where('b').gt(2);
    query.getQuery(); // { a: 1, b: { $gt: 2 } }
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1762">line 1762</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    current query filter
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="getUpdate"><span class="type-signature"></span>getUpdate<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns the current update operations as a JSON object.

#### Example:

    const query = new Query();
    query.updateOne({}, { $set: { a: 5 } });
    query.getUpdate(); // { $set: { a: 5 } }
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1798">line 1798</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    current update operations
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="gt"><span class="type-signature"></span>gt<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$gt` query condition.

When called with one argument, the most recent path passed to `where()` is used.

#### Example:

    Thing.find().where('age').gt(21);

    // or
    Thing.find().gt('age', 21);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line521">line 521</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$gt https://www.mongodb.com/docs/manual/reference/operator/gt/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="gte"><span class="type-signature"></span>gte<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$gte` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line542">line 542</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$gte https://www.mongodb.com/docs/manual/reference/operator/gte/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="hint"><span class="type-signature"></span>hint<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets query hints.

#### Example:

    query.hint({ indexA: 1, indexB: -1 });

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">a hint object</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line938">line 938</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$hint https://www.mongodb.com/docs/manual/reference/operator/hint/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="hint"><span class="type-signature"></span>hint<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets query hints.

#### Example:

    query.hint({ indexA: 1, indexB: -1});
    query.hint('indexA_1_indexB_1');

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">string</span>


            
            </td>

            

            

            <td class="description last">a hint object or the index name</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1475">line 1475</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="in"><span class="type-signature"></span>in<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies an `$in` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line598">line 598</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$in https://www.mongodb.com/docs/manual/reference/operator/in/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="incRequestId"><span class="type-signature"></span>incRequestId<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Assign next request Id.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongodb_lib_cmap_commands.js.html">node_modules/mongodb/lib/cmap/commands.js</a>, <a href="node_modules_mongodb_lib_cmap_commands.js.html#line70">line 70</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="intersects"><span class="type-signature"></span>intersects<span class="signature">(arg<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declares an intersects query for `geometry()`.

#### Example:

    query.where('path').intersects().geometry({
      type: 'LineString',
      coordinates: [[180.0, 11.0], [180, 9.0]]
    });

    query.where('path').intersects({
      type: 'LineString',
      coordinates: [[180.0, 11.0], [180, 9.0]]
    });

#### Note:

**MUST** be used after `where()`.

#### Note:

In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4997">line 4997</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$geometry https://www.mongodb.com/docs/manual/reference/operator/geometry/</li>
        
            <li>geoIntersects https://www.mongodb.com/docs/manual/reference/operator/geoIntersects/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="intersects"><span class="type-signature"></span>intersects<span class="signature">(arg<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declares an intersects query for `geometry()`.

#### Example:

    query.where('path').intersects().geometry({
        type: 'LineString'
      , coordinates: [[180.0, 11.0], [180, 9.0]]
    })

    query.where('path').intersects({
        type: 'LineString'
      , coordinates: [[180.0, 11.0], [180, 9.0]]
    })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line998">line 998</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="j"><span class="type-signature"></span>j<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Requests acknowledgement that this operation has been persisted to MongoDB's
on-disk journal.
This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndReplace()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)

#### Example:

    await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">boolean</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1346">line 1346</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://www.mongodb.com/docs/manual/reference/write-concern/#j-option</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="j"><span class="type-signature"></span>j<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Requests acknowledgement that this operation has been persisted to MongoDB's
on-disk journal.
This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to the `j` value if it is specified in writeConcern options

#### Example:

    mquery().w(2).j(true).wtimeout(2000);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">boolean</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1499">line 1499</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="lean"><span class="type-signature"></span>lean<span class="signature">(bool)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the lean option.

Documents returned from queries with the `lean` option enabled are plain
javascript objects, not [Mongoose Documents](/docs/api/document.html). They have no
`save` method, getters/setters, virtuals, or other Mongoose features.

#### Example:

    new Query().lean() // true
    new Query().lean(true)
    new Query().lean(false)

    const docs = await Model.find().lean();
    docs[0] instanceof mongoose.Document; // false

[Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),
especially when combined
with [cursors](/docs/queries.html#streaming).

If you need virtuals, getters/setters, or defaults with `lean()`, you need
to use a plugin. See:

- [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)
- [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)
- [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>bool</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">defaults to true</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1998">line 1998</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="limit"><span class="type-signature"></span>limit<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the maximum number of documents the query will return.

#### Example:

    query.limit(20);

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line833">line 833</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="lt"><span class="type-signature"></span>lt<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$lt` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line556">line 556</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$lt https://www.mongodb.com/docs/manual/reference/operator/lt/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="lte"><span class="type-signature"></span>lte<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$lte` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line570">line 570</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$lte https://www.mongodb.com/docs/manual/reference/operator/lte/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="maxDistance"><span class="type-signature"></span>maxDistance<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `maxDistance` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line680">line 680</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$maxDistance https://www.mongodb.com/docs/manual/reference/operator/maxDistance/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="maxTimeMS"><span class="type-signature"></span>maxTimeMS<span class="signature">(ms<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the [maxTimeMS](https://www.mongodb.com/docs/manual/reference/method/cursor.maxTimeMS/)
option. This will tell the MongoDB server to abort if the query or write op
has been running for more than `ms` milliseconds.

Calling `query.maxTimeMS(v)` is equivalent to `query.setOptions({ maxTimeMS: v })`

#### Example:

    const query = new Query();
    // Throws an error 'operation exceeded time limit' as long as there's
    // >= 1 doc in the queried collection
    const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>ms</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">The number of milliseconds</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1724">line 1724</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="merge"><span class="type-signature"></span>merge<span class="signature">(source)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Merges another Query or conditions object into this one.

When a Query is passed, conditions, field selection and options are merged.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>source</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Query">Query</a></span>
|

<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2314">line 2314</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="merge"><span class="type-signature"></span>merge<span class="signature">(source)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Merges another Query or conditions object into this one.

When a Query is passed, conditions, field selection and options are merged.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>source</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Query">Query</a></span>
|

<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1780">line 1780</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="mod"><span class="type-signature"></span>mod<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$mod` condition, filters documents for documents whose
`path` property is a number that is equal to `remainder` modulo `divisor`.

#### Example:

    // All find products whose inventory is odd
    Product.find().mod('inventory', [2, 1]);
    Product.find().where('inventory').mod([2, 1]);
    // This syntax is a little strange, but supported.
    Product.find().where('inventory').mod(2, 1);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">must be of length 2, first element is `divisor`, 2nd element is `remainder`.</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line694">line 694</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$mod https://www.mongodb.com/docs/manual/reference/operator/mod/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="mod"><span class="type-signature"></span>mod<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$mod` condition
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line575">line 575</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="mongooseOptions"><span class="type-signature"></span>mongooseOptions<span class="signature">(options)</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Getter/setter around the current mongoose-specific options for this query
Below are the current Mongoose-specific options.

- `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](#query_Query-populate)
- `lean`: if truthy, Mongoose will not [hydrate](/docs/api/model.html#model_Model-hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](#query_Query-lean) for more information.
- `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.
- `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.
- `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](#query_Query-nearSphere)

Mongoose maintains a separate object for internal options because
Mongoose sends `Query.prototype.options` to the MongoDB server, and the
above options are not relevant for the MongoDB server.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">if specified, overwrites the current options</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2147">line 2147</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the options
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="ne"><span class="type-signature"></span>ne<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$ne` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">any</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line584">line 584</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$ne https://www.mongodb.com/docs/manual/reference/operator/ne/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="near"><span class="type-signature"></span>near<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$near` or `$nearSphere` condition

These operators return documents sorted by distance.

#### Example:

    query.where('loc').near({ center: [10, 10] });
    query.where('loc').near({ center: [10, 10], maxDistance: 5 });
    query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });
    query.near('loc', { center: [10, 10], maxDistance: 5 });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5070">line 5070</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$near https://www.mongodb.com/docs/manual/reference/operator/near/</li>
        
            <li>$nearSphere https://www.mongodb.com/docs/manual/reference/operator/nearSphere/</li>
        
            <li>$maxDistance https://www.mongodb.com/docs/manual/reference/operator/maxDistance/</li>
        
            <li>MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="near"><span class="type-signature"></span>near<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Overwriting mquery is needed to support a couple different near() forms found in older
versions of mongoose
near([1,1])
near(1,1)
near(field, [1,2])
near(field, 1, 2)
In addition to all of the normal forms supported by mquery
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5095">line 5095</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="near"><span class="type-signature"></span>near<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$near` or `$nearSphere` condition

These operators return documents sorted by distance.

#### Example:

    query.where('loc').near({ center: [10, 10] });
    query.where('loc').near({ center: [10, 10], maxDistance: 5 });
    query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });
    query.near('loc', { center: [10, 10], maxDistance: 5 });
    query.near({ center: { type: 'Point', coordinates: [..] }})
    query.near().geometry({ type: 'Point', coordinates: [..] })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line917">line 917</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="nearSphere"><span class="type-signature"></span>nearSphere<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    _DEPRECATED_ Specifies a `$nearSphere` condition

#### Example:

    query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });

**Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.

#### Example:

    query.where('loc').near({ center: [10, 10], spherical: true });
</div>













<dl class="details">

    

    

    

    

    

    

    

    
        <dt class="important tag-deprecated">Deprecated:</dt><dd class="yes-def tag-deprecated"><ul class="dummy"><li>Yes</li></ul></dd>
    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5180">line 5180</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>near() #query_Query-near</li>
        
            <li>$near https://www.mongodb.com/docs/manual/reference/operator/near/</li>
        
            <li>$nearSphere https://www.mongodb.com/docs/manual/reference/operator/nearSphere/</li>
        
            <li>$maxDistance https://www.mongodb.com/docs/manual/reference/operator/maxDistance/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="nextRequestId"><span class="type-signature"></span>nextRequestId<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Peek next request Id.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongodb_lib_cmap_commands.js.html">node_modules/mongodb/lib/cmap/commands.js</a>, <a href="node_modules_mongodb_lib_cmap_commands.js.html#line74">line 74</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="nin"><span class="type-signature"></span>nin<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies an `$nin` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line612">line 612</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$nin https://www.mongodb.com/docs/manual/reference/operator/nin/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="nor"><span class="type-signature"></span>nor<span class="signature">(array)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies arguments for a `$nor` condition.

#### Example:

    query.nor([{ color: 'green' }, { status: 'ok' }]);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last">array of conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line489">line 489</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$nor https://www.mongodb.com/docs/manual/reference/operator/nor/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="nor"><span class="type-signature"></span>nor<span class="signature">(array)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies arguments for a `$nor` condition.

#### Example:

    query.nor([{ color: 'green' }, { status: 'ok' }])
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last">array of conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line373">line 373</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="or"><span class="type-signature"></span>or<span class="signature">(array)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies arguments for an `$or` condition.

#### Example:

    query.or([{ color: 'red' }, { status: 'emergency' }]);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last">array of conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line473">line 473</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$or https://www.mongodb.com/docs/manual/reference/operator/or/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="or"><span class="type-signature"></span>or<span class="signature">(array)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies arguments for an `$or` condition.

#### Example:

    query.or([{ color: 'red' }, { status: 'emergency' }])
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>array</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last">array of conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line354">line 354</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="orFail"><span class="type-signature"></span>orFail<span class="signature">(err<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Make this query throw an error if no documents match the given `filter`.
This is handy for integrating with async/await, because `orFail()` saves you
an extra `if` statement to check if no document was found.

#### Example:

    // Throws if no doc returned
    await Model.findOne({ foo: 'bar' }).orFail();

    // Throws if no document was updated. Note that `orFail()` will still
    // throw if the only document that matches is `{ foo: 'bar', name: 'test' }`,
    // because `orFail()` will throw if no document was _updated_, not
    // if no document was _found_.
    await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();

    // Throws "No docs found!" error if no docs match `{ foo: 'bar' }`
    await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));

    // Throws "Not found" error if no document was found
    await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).
      orFail(() => Error('Not found'));
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>err</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>
|

<span class="param-type"><a href="global.html#Error">Error</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4172">line 4172</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="polygon"><span class="type-signature"></span>polygon<span class="signature">(path<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$polygon` condition

#### Example:

    query.where('loc').within().polygon([10, 20], [13, 25], [7, 15]);
    query.polygon('loc', [10, 20], [13, 25], [7, 15]);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>coordinatePairs...</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>
|

<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5217">line 5217</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$polygon https://www.mongodb.com/docs/manual/reference/operator/polygon/</li>
        
            <li>MongoDB Geospatial Indexing https://www.mongodb.com/docs/manual/core/geospatial-indexes/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="polygon"><span class="type-signature"></span>polygon<span class="signature">(path<span class="signature-attributes">opt</span>, val<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a $polygon condition

#### Example:

    query.where('loc').within().polygon([10,20], [13, 25], [7,15])
    query.polygon('loc', [10,20], [13, 25], [7,15])
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>
|

<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line823">line 823</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="http://www.mongodb.org/display/DOCS/Geospatial+Indexing">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="populate"><span class="type-signature"></span>populate<span class="signature">(path, select<span class="signature-attributes">opt</span>, model<span class="signature-attributes">opt</span>, match<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies paths which should be populated with other documents.

#### Example:

    let book = await Book.findOne().populate('authors');
    book.title; // 'Node.js in Action'
    book.authors[0].name; // 'TJ Holowaychuk'
    book.authors[1].name; // 'Nathan Rajlich'

    let books = await Book.find().populate({
      path: 'authors',
      // `match` and `sort` apply to the Author model,
      // not the Book model. These options do not affect
      // which documents are in `books`, just the order and
      // contents of each book document's `authors`.
      match: { name: new RegExp('.*h.*', 'i') },
      sort: { name: -1 }
    });
    books[0].title; // 'Node.js in Action'
    // Each book's `authors` are sorted by name, descending.
    books[0].authors[0].name; // 'TJ Holowaychuk'
    books[0].authors[1].name; // 'Marc Harter'

    books[1].title; // 'Professional AngularJS'
    // Empty array, no authors' name has the letter 'h'
    books[1].authors; // []

Paths are populated after the query executes and a response is received. A
separate query is then executed for each path specified for population. After
a response for each query has also been returned, the results are passed to
the callback.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">String</span>
|

<span class="param-type">Array:<a href="global.html"></a>.&lt;String:<a href="global.html"></a>></span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">either the path(s) to populate or an object specifying all parameters</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>select</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">Field selection for the population query</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>model</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="global.html#Model">Model</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>match</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">Conditions for the population query</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">Options for the population query (sort, etc)
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The path to populate.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>retainNullValues</code></td>
            

            <td class="type">
            
                
<span class="param-type">boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>getters</code></td>
            

            <td class="type">
            
                
<span class="param-type">boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>clone</code></td>
            

            <td class="type">
            
                
<span class="param-type">boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>match</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://www.mongodb.com/docs/manual/tutorial/query-documents/), or a function that returns a filter object.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>transform</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">Function that Mongoose will call on every populated document that allows you to transform the populated document.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">Additional options like `limit` and `lean`.</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4660">line 4660</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>population /docs/populate.html</li>
        
            <li>Query#select #query_Query-select</li>
        
            <li>Model.populate #model_Model-populate</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="post"><span class="type-signature"></span>post<span class="signature">(fn)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Add post [middleware](/docs/middleware.html) to this query instance. Doesn't affect
other queries.

#### Example:

    const q1 = Question.find({ answer: 42 });
    q1.post(function middleware() {
      console.log(this.getFilter());
    });
    await q1.exec(); // Prints "{ answer: 42 }"

    // Doesn't print anything, because `middleware()` is only
    // registered on `q1`.
    await Question.find({ answer: 42 });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fn</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4549">line 4549</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="pre"><span class="type-signature"></span>pre<span class="signature">(fn)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Add pre [middleware](/docs/middleware.html) to this query instance. Doesn't affect
other queries.

#### Example:

    const q1 = Question.find({ answer: 42 });
    q1.pre(function middleware() {
      console.log(this.getFilter());
    });
    await q1.exec(); // Prints "{ answer: 42 }"

    // Doesn't print anything, because `middleware()` is only
    // registered on `q1`.
    await Question.find({ answer: 42 });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fn</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4523">line 4523</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="projection"><span class="type-signature"></span>projection<span class="signature">(arg)</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Get/set the current projection (AKA fields). Pass `null` to remove the
current projection.

Unlike `projection()`, the `select()` function modifies the current
projection in place. This function overwrites the existing projection.

#### Example:

    const q = Model.find();
    q.projection(); // null

    q.select('a b');
    q.projection(); // { a: 1, b: 1 }

    q.projection({ c: 1 });
    q.projection(); // { c: 1 }

    q.projection(null);
    q.projection(); // null
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">null</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line958">line 958</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    the current projection
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="read"><span class="type-signature"></span>read<span class="signature">(mode, tags<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Determines the MongoDB nodes from which to read.

#### Preferences:

```
primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.
secondary            Read from secondary if available, otherwise error.
primaryPreferred     Read from primary if available, otherwise a secondary.
secondaryPreferred   Read from a secondary if available, otherwise read from the primary.
nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.
```

Aliases

```
p   primary
pp  primaryPreferred
s   secondary
sp  secondaryPreferred
n   nearest
```

#### Example:

    new Query().read('primary')
    new Query().read('p')  // same as primary

    new Query().read('primaryPreferred')
    new Query().read('pp') // same as primaryPreferred

    new Query().read('secondary')
    new Query().read('s')  // same as secondary

    new Query().read('secondaryPreferred')
    new Query().read('sp') // same as secondaryPreferred

    new Query().read('nearest')
    new Query().read('n')  // same as nearest

    // read from secondaries with matching tags
    new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])

Read more about how to use read preferences [here](https://www.mongodb.com/docs/manual/applications/replication/#read-preference).
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>mode</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">one of the listed preference options or aliases</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>tags</code></td>
            

            <td class="type">
            
                
<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">optional tags for this query</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1125">line 1125</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://www.mongodb.com/docs/manual/applications/replication/#read-preference</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="regex"><span class="type-signature"></span>regex<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$regex` query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">RegExp</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line666">line 666</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$regex https://www.mongodb.com/docs/manual/reference/operator/regex/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="replaceOne"><span class="type-signature"></span>replaceOne<span class="signature">(filter<span class="signature-attributes">opt</span>, doc<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>, callback<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as a replaceOne() operation.
MongoDB will replace the existing document and will not accept any [atomic operators](https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/#pattern) (`$set`, etc.)

**Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`
and `post('replaceOne')` instead.

#### Example:

    const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });
    res.acknowledged; // Indicates if this write result was acknowledged. If not, then all other members of this result will be undefined.
    res.matchedCount; // Number of documents that matched the filter
    res.modifiedCount; // Number of documents that were modified
    res.upsertedCount; // Number of documents that were upserted
    res.upsertedId; // Identifier of the inserted document (if an upsert took place)

This function triggers the following middleware.

- `replaceOne()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the update command</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>multipleCastError</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>upsert</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">if true, and no documents found, insert a new document</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>writeConcern</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>timestamps</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    

        <tr>
            
                <td class="name"><code>callback</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">params are (error, writeOpResult)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4066">line 4066</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Model.update #model_Model-update</li>
        
            <li>Query docs https://mongoosejs.com/docs/queries.html</li>
        
            <li>update https://www.mongodb.com/docs/manual/reference/method/db.collection.update/</li>
        
            <li>UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html</li>
        
            <li>MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="replaceOne"><span class="type-signature"></span>replaceOne<span class="signature">(criteria<span class="signature-attributes">opt</span>, doc<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as an `replaceOne()` operation. Similar
to `updateOne()`, except `replaceOne()` is not allowed to use atomic
modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always
replace the existing doc.

#### Example:

    // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`
    mquery().replaceOne({ _id: 1 }, { year: 2017 })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the update command</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2133">line 2133</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="select"><span class="type-signature"></span>select<span class="signature">(arg)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies which document fields to include or exclude (also known as the query "projection")

When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api/schematype.html#schematype_SchemaType-select).

A projection _must_ be either inclusive or exclusive. In other words, you must
either list the fields to include (which excludes all others), or list the fields
to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://www.mongodb.com/docs/manual/tutorial/project-fields-from-query-results/#suppress-id-field).

#### Example:

    // include a and b, exclude other fields
    query.select('a b');
    // Equivalent syntaxes:
    query.select(['a', 'b']);
    query.select({ a: 1, b: 1 });

    // exclude c and d, include other fields
    query.select('-c -d');

    // Use `+` to override schema-level `select: false` without making the
    // projection inclusive.
    const schema = new Schema({
      foo: { type: String, select: false },
      bar: String
    });
    // ...
    query.select('+foo'); // Override foo's `select: false` without excluding `bar`

    // or you may use object notation, useful when
    // you have keys already prefixed with a "-"
    query.select({ a: 1, b: 1 });
    query.select({ c: 0, d: 0 });

    Additional calls to select can override the previous selection:
    query.select({ a: 1, b: 1 }).select({ b: 0 }); // selection is now { a: 1 }
    query.select({ a: 0, b: 0 }).select({ b: 1 }); // selection is now { a: 0 }
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">String</span>
|

<span class="param-type">Array:<a href="global.html"></a>.&lt;String:<a href="global.html"></a>></span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line999">line 999</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>SchemaType /docs/api/schematype.html</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="select"><span class="type-signature"></span>select<span class="signature">(arg)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies which document fields to include or exclude

#### String syntax

When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.

#### Example:

    // include a and b, exclude c
    query.select('a b -c');

    // or you may use object notation, useful when
    // you have keys already prefixed with a "-"
    query.select({a: 1, b: 1, c: 0});

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">String</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1109">line 1109</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li><a href="global.html#SchemaType">SchemaType</a></li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="selected"><span class="type-signature"></span>selected<span class="signature">()</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if field selection has been made.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5352">line 5352</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="selected"><span class="type-signature"></span>selected<span class="signature">()</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if field selection has been made.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2484">line 2484</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="selectedExclusively"><span class="type-signature"></span>selectedExclusively<span class="signature">()</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if exclusive field selection has been made.

    query.selectedExclusively(); // false
    query.select('-name');
    query.selectedExclusively(); // true
    query.selectedInclusively(); // false
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5380">line 5380</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="selectedExclusively"><span class="type-signature"></span>selectedExclusively<span class="signature">()</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if exclusive field selection has been made.

    query.selectedExlusively() // false
    query.select('-name')
    query.selectedExlusively() // true
    query.selectedInclusively() // false
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2529">line 2529</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="selectedInclusively"><span class="type-signature"></span>selectedInclusively<span class="signature">()</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if inclusive field selection has been made.

    query.selectedInclusively(); // false
    query.select('name');
    query.selectedInclusively(); // true
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line5362">line 5362</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="selectedInclusively"><span class="type-signature"></span>selectedInclusively<span class="signature">()</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if inclusive field selection has been made.

    query.selectedInclusively() // false
    query.select('name')
    query.selectedInclusively() // true
    query.selectedExlusively() // false
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2499">line 2499</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="session"><span class="type-signature"></span>session<span class="signature">(session<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the [MongoDB session](https://www.mongodb.com/docs/manual/reference/server-sessions/)
associated with this query. Sessions are how you mark a query as part of a
[transaction](/docs/transactions.html).

Calling `session(null)` removes the session from this query.

#### Example:

    const s = await mongoose.startSession();
    await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">from `await conn.startSession()`</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1227">line 1227</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Connection.prototype.startSession() /docs/api/connection.html#connection_Connection-startSession</li>
        
            <li>mongoose.startSession() /docs/api/mongoose.html#mongoose_Mongoose-startSession</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="set"><span class="type-signature"></span>set<span class="signature">(path, val<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Adds a `$set` to this query's update without changing the operation.
This is useful for query middleware so you can add an update regardless
of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.

#### Example:

    // Updates `{ $set: { updatedAt: new Date() } }`
    new Query().updateOne({}, {}).set('updatedAt', new Date());
    new Query().updateMany({}, {}).set({ updatedAt: new Date() });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">path or object of key/value pairs to set</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Any</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the value to set</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2020">line 2020</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="setOptions"><span class="type-signature"></span>setOptions<span class="signature">(options)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets query options. Some options only make sense for certain operations.

#### Options:

The following options are only for `find()`:

- [tailable](https://www.mongodb.com/docs/manual/core/tailable-cursors/)
- [sort](https://www.mongodb.com/docs/manual/reference/method/cursor.sort/)
- [limit](https://www.mongodb.com/docs/manual/reference/method/cursor.limit/)
- [skip](https://www.mongodb.com/docs/manual/reference/method/cursor.skip/)
- [allowDiskUse](https://www.mongodb.com/docs/manual/reference/method/cursor.allowDiskUse/)
- [batchSize](https://www.mongodb.com/docs/manual/reference/method/cursor.batchSize/)
- [readPreference](https://www.mongodb.com/docs/manual/applications/replication/#read-preference)
- [hint](https://www.mongodb.com/docs/manual/reference/method/cursor.hint/)
- [comment](https://www.mongodb.com/docs/manual/reference/method/cursor.comment/)

The following options are only for write operations: `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:

- [upsert](https://www.mongodb.com/docs/manual/reference/method/db.collection.update/)
- [writeConcern](https://www.mongodb.com/docs/manual/reference/method/db.collection.update/)
- [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.
- overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.

The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:

- [lean](#query_Query-lean)
- [populate](/docs/populate.html)
- [projection](#query_Query-projection)
- sanitizeProjection

The following options are only for all operations **except** `updateOne()`, `updateMany()`, `deleteOne()`, and `deleteMany()`:

- [maxTimeMS](https://www.mongodb.com/docs/manual/reference/operator/meta/maxTimeMS/)

The following options are for `findOneAndUpdate()` and `findOneAndRemove()`

- rawResult

The following options are for all operations:

- [strict](/docs/guide.html#strict)
- [collation](https://www.mongodb.com/docs/manual/reference/collation/)
- [session](https://www.mongodb.com/docs/manual/reference/server-sessions/)
- [explain](https://www.mongodb.com/docs/manual/reference/method/cursor.explain/)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1554">line 1554</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="setOptions"><span class="type-signature"></span>setOptions<span class="signature">(options)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Sets query options.

#### Options:

- [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *
- [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\)%7D%7D) *
- [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *
- [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *
- [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *
- [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *
- [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *
- [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *
- [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *
- [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)
- collection the collection to query against

_* denotes a query helper method is also available_
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line160">line 160</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="setQuery"><span class="type-signature"></span>setQuery<span class="signature">(new)</span><span class="type-signature"> &rarr; {undefined}</span></h4>
    

    



<div class="description">
    Sets the query conditions to the provided JSON object.

#### Example:

    const query = new Query();
    query.find({ a: 1 })
    query.setQuery({ a: 2 });
    query.getQuery(); // { a: 2 }
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>new</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">query conditions</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1781">line 1781</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">undefined</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="setTraceFunction"><span class="type-signature"></span>setTraceFunction<span class="signature">(traceFunction)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Add trace function that gets called when the query is executed.
The function will be called with (method, queryInfo, query) and
should return a callback function which will be called
with (err, result, millis) when the query is complete.

queryInfo is an object containing: {
  collectionName: <name of the collection>,
  conditions: <query criteria>,
  options: <comment, fields, readPreference, etc>,
  doc: [document to update, if applicable]
}

NOTE: Does not trace stream queries.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>traceFunction</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2402">line 2402</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="setUpdate"><span class="type-signature"></span>setUpdate<span class="signature">(new)</span><span class="type-signature"> &rarr; {undefined}</span></h4>
    

    



<div class="description">
    Sets the current update operation to new value.

#### Example:

    const query = new Query();
    query.updateOne({}, { $set: { a: 5 } });
    query.setUpdate({ $set: { b: 6 } });
    query.getUpdate(); // { $set: { b: 6 } }
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>new</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">update operation</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1817">line 1817</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">undefined</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="size"><span class="type-signature"></span>size<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a `$size` query condition.

When called with one argument, the most recent path passed to `where()` is used.

#### Example:

    const docs = await MyModel.where('tags').size(0).exec();
    assert(Array.isArray(docs));
    console.log('documents with 0 tags', docs);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line646">line 646</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$size https://www.mongodb.com/docs/manual/reference/operator/size/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="skip"><span class="type-signature"></span>skip<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the number of documents to skip.

#### Example:

    query.skip(100).limit(20);

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line866">line 866</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>cursor.skip https://www.mongodb.com/docs/manual/reference/method/cursor.skip/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="slaveOk"><span class="type-signature"></span>slaveOk<span class="signature">(v)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.

#### Example:

    query.slaveOk() // true
    query.slaveOk(true)
    query.slaveOk(false)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>v</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            

            

            <td class="description last">defaults to true</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    
        <dt class="important tag-deprecated">Deprecated:</dt><dd><ul class="dummy"><li>use read() preferences instead if on mongodb >= 2.2</li></ul></dd>
    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1548">line 1548</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference</li>
        
            <li>read()</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="slice"><span class="type-signature"></span>slice<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$slice` projection for an array.

#### Example:

    query.slice('comments', 5); // Returns the first 5 comments
    query.slice('comments', -5); // Returns the last 5 comments
    query.slice('comments', [10, 5]); // Returns the first 5 comments after the 10-th
    query.where('comments').slice(5); // Returns the first 5 comments
    query.where('comments').slice([-10, 5]); // Returns the first 5 comments after the 10-th to last

**Note:** If the absolute value of the number of elements to be sliced is greater than the number of elements in the array, all array elements will be returned.

     // Given `arr`: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     query.slice('arr', 20); // Returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     query.slice('arr', -20); // Returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

**Note:** If the number of elements to skip is positive and greater than the number of elements in the array, an empty array will be returned.

     // Given `arr`: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     query.slice('arr', [20, 5]); // Returns []

**Note:** If the number of elements to skip is negative and its absolute value is greater than the number of elements in the array, the starting position is the start of the array.

     // Given `arr`: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     query.slice('arr', [-20, 5]); // Returns [1, 2, 3, 4, 5]
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>
|

<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">number of elements to slice or array with number of elements to skip and number of elements to slice</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line360">line 360</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://www.mongodb.com/docs/manual/tutorial/query-documents/#projection</li>
        
            <li>$slice https://www.mongodb.com/docs/manual/reference/projection/slice/#prj._S_slice</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="slice"><span class="type-signature"></span>slice<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a $slice condition for a `path`

#### Example:

    query.slice('comments', 5)
    query.slice('comments', -5)
    query.slice('comments', [10, 5])
    query.where('comments').slice(5)
    query.where('comments').slice([-10, 5])
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">number/range of elements to slice</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1168">line 1168</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="sort"><span class="type-signature"></span>sort<span class="signature">(arg)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the sort order

If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.

If a string is passed, it must be a space delimited list of path names. The
sort order of each path is ascending unless the path name is prefixed with `-`
which will be treated as descending.

#### Example:

    // sort by "field" ascending and "test" descending
    query.sort({ field: 'asc', test: -1 });

    // equivalent
    query.sort('field -test');

    // also possible is to use a array with array key-value pairs
    query.sort([['field', 'asc']]);

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">String</span>
|

<span class="param-type">Array:<a href="global.html"></a>.&lt;Array:<a href="global.html"></a>.&lt;(string:<a href="global.html"></a>|number:<a href="global.html"></a>)>></span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line2868">line 2868</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>cursor.sort https://www.mongodb.com/docs/manual/reference/method/cursor.sort/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="sort"><span class="type-signature"></span>sort<span class="signature">(arg)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the sort order

If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.

If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.

#### Example:

    // these are equivalent
    query.sort({ field: 'asc', test: -1 });
    query.sort('field -test');
    query.sort([['field', 1], ['test', -1]]);

#### Note:

 - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).
 - Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>arg</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">String</span>
|

<span class="param-type">Array</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1232">line 1232</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="tailable"><span class="type-signature"></span>tailable<span class="signature">(bool, opts<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Sets the tailable option (for use with capped collections).

#### Example:

    query.tailable(); // true
    query.tailable(true);
    query.tailable(false);

    // Set both `tailable` and `awaitData` options
    query.tailable({ awaitData: true });

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>bool</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last">defaults to true</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>opts</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">options to set
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>awaitData</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">false by default. Set to true to keep the cursor open even if there's no data.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>maxAwaitTimeMS</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4971">line 4971</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>tailable https://www.mongodb.com/docs/manual/tutorial/create-tailable-cursor/</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="tailable"><span class="type-signature"></span>tailable<span class="signature">(v)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Sets tailable option.

#### Example:

    query.tailable() <== true
    query.tailable(true)
    query.tailable(false)

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>v</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            

            

            <td class="description last">defaults to true</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1682">line 1682</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id="then"><span class="type-signature"></span>then<span class="signature">(resolve<span class="signature-attributes">opt</span>, reject<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Executes the query returning a `Promise` which will be
resolved with either the doc(s) or rejected with the error.

More about [`then()` in JavaScript](https://masteringjs.io/tutorials/fundamentals/then).
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>resolve</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>reject</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4448">line 4448</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="then"><span class="type-signature"></span>then<span class="signature">(resolve<span class="signature-attributes">opt</span>, reject<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {Promise}</span></h4>
    

    



<div class="description">
    Executes the query returning a `Promise` which will be
resolved with either the doc(s) or rejected with the error.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>resolve</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>reject</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2448">line 2448</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Promise</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="toConstructor"><span class="type-signature"></span>toConstructor<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Converts this query to a customized, reusable query constructor with all arguments and options retained.

#### Example:

    // Create a query for adventure movies and read from the primary
    // node in the replica-set unless it is down, in which case we'll
    // read from a secondary node.
    const query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');

    // create a custom Query constructor based off these settings
    const Adventure = query.toConstructor();

    // further narrow down our query results while still using the previous settings
    await Adventure().where({ name: /^Life/ }).exec();

    // since Adventure is a stand-alone constructor we can also add our own
    // helper methods and getters without impacting global queries
    Adventure.prototype.startsWith = function (prefix) {
      this.where({ name: new RegExp('^' + prefix) })
      return this;
    }
    Object.defineProperty(Adventure.prototype, 'highlyRated', {
      get: function () {
        this.where({ rating: { $gt: 4.5 }});
        return this;
      }
    })
    await Adventure().highlyRated.startsWith('Life').exec();
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line209">line 209</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    subclass-of-Query
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="toConstructor"><span class="type-signature"></span>toConstructor<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Converts this query to a constructor function with all arguments and options retained.

#### Example:

    // Create a query that will read documents with a "video" category from
    // `aCollection` on the primary node in the replica-set unless it is down,
    // in which case we'll read from a secondary node.
    var query = mquery({ category: 'video' })
    query.setOptions({ collection: aCollection, read: 'primaryPreferred' });

    // create a constructor based off these settings
    var Video = query.toConstructor();

    // Video is now a subclass of mquery() and works the same way but with the
    // default query parameters and options set.

    // run a query with the previous settings but filter for movies with names
    // that start with "Life".
    Video().where({ name: /^Life/ }).exec(cb);
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line110">line 110</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    new Query
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="toString"><span class="type-signature"></span>toString<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Overwrite default `.toString` to make logging more useful
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1190">line 1190</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="transform"><span class="type-signature"></span>transform<span class="signature">(fn)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Runs a function `fn` and treats the return value of `fn` as the new value
for the query to resolve to.

Any functions you pass to `transform()` will run **after** any post hooks.

#### Example:

    const res = await MyModel.findOne().transform(res => {
      // Sets a `loadedAt` property on the doc that tells you the time the
      // document was loaded.
      return res == null ?
        res :
        Object.assign(res, { loadedAt: new Date() });
    });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>fn</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last">function to run to transform the query result</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4144">line 4144</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="updateMany"><span class="type-signature"></span>updateMany<span class="signature">(filter<span class="signature-attributes">opt</span>, update<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>, callback<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as an updateMany() operation.
MongoDB will update _all_ documents that match `filter` (as opposed to just the first one).

**Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`
and `post('updateMany')` instead.

#### Example:

    const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });
    res.n; // Number of documents matched
    res.nModified; // Number of documents modified

This function triggers the following middleware.

- `updateMany()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>update</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the update command</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>multipleCastError</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>upsert</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">if true, and no documents found, insert a new document</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>writeConcern</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>timestamps</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    

        <tr>
            
                <td class="name"><code>callback</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">params are (error, writeOpResult)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3932">line 3932</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Model.update #model_Model-update</li>
        
            <li>Query docs https://mongoosejs.com/docs/queries.html</li>
        
            <li>update https://www.mongodb.com/docs/manual/reference/method/db.collection.update/</li>
        
            <li>UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html</li>
        
            <li>MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="updateMany"><span class="type-signature"></span>updateMany<span class="signature">(criteria<span class="signature-attributes">opt</span>, doc<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as an `updateMany()` operation. This function will update _all_ documents that match
`criteria`, rather than just the first one.

_All paths passed that are not $atomic operations will become $set ops._

#### Example:

    // Update every document whose `title` contains 'test'
    mquery().updateMany({ title: /test/ }, { year: 2017 })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the update command</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2063">line 2063</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="updateOne"><span class="type-signature"></span>updateOne<span class="signature">(filter<span class="signature-attributes">opt</span>, update<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>, callback<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as an updateOne() operation.
MongoDB will update _only_ the first document that matches `filter`.

- Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic operators](https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/#pattern) like `$set`.

**Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`
and `post('updateOne')` instead.

#### Example:

    const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });
    res.acknowledged; // Indicates if this write result was acknowledged. If not, then all other members of this result will be undefined.
    res.matchedCount; // Number of documents that matched the filter
    res.modifiedCount; // Number of documents that were modified
    res.upsertedCount; // Number of documents that were upserted
    res.upsertedId; // Identifier of the inserted document (if an upsert took place)

This function triggers the following middleware.

- `updateOne()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>update</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>
|

<span class="param-type">Array</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the update command</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>multipleCastError</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>upsert</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">if true, and no documents found, insert a new document</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>writeConcern</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">sets the [write concern](https://www.mongodb.com/docs/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>timestamps</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    

        <tr>
            
                <td class="name"><code>callback</code></td>
            

            <td class="type">
            
                
<span class="param-type">function</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">params are (error, writeOpResult)</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line4000">line 4000</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>Model.update #model_Model-update</li>
        
            <li>Query docs https://mongoosejs.com/docs/queries.html</li>
        
            <li>update https://www.mongodb.com/docs/manual/reference/method/db.collection.update/</li>
        
            <li>UpdateResult https://mongodb.github.io/node-mongodb-native/4.9/interfaces/UpdateResult.html</li>
        
            <li>MongoDB docs https://www.mongodb.com/docs/manual/reference/command/update/#update-command-output</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="updateOne"><span class="type-signature"></span>updateOne<span class="signature">(criteria<span class="signature-attributes">opt</span>, doc<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Declare and/or execute this query as an `updateOne()` operation. This function will _always_ update just one document,
regardless of the `multi` option.

_All paths passed that are not $atomic operations will become $set ops._

#### Example:

    // Update the first document whose `title` contains 'test'
    mquery().updateMany({ title: /test/ }, { year: 2017 })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>criteria</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>doc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">the update command</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2098">line 2098</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="validate"><span class="type-signature"></span>validate<span class="signature">(castedDoc, options, isOverwriting)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Mongoose calls this function internally to validate the query if
`runValidators` is set
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>castedDoc</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">the update, after casting</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">the options from `_optionsForExec()`</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>isOverwriting</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3822">line 3822</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="w"><span class="type-signature"></span>w<span class="signature">(val)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the specified number of `mongod` servers, or tag set of `mongod` servers,
that must acknowledge this write before this write is considered successful.
This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndReplace()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)

#### Example:

    // The 'majority' option means the `deleteOne()` promise won't resolve
    // until the `deleteOne()` has propagated to the majority of the replica set
    await mongoose.model('Person').
      deleteOne({ name: 'Ned Stark' }).
      w('majority');
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://www.mongodb.com/docs/manual/reference/write-concern/#w-option).</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1302">line 1302</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://www.mongodb.com/docs/manual/reference/write-concern/#w-option</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="where"><span class="type-signature"></span>where<span class="signature">(path<span class="signature-attributes">opt</span>, val<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `path` for use with chaining.

#### Example:

    // instead of writing:
    User.find({age: {$gte: 21, $lte: 65}});

    // we can instead write:
    User.where('age').gte(21).lte(65);

    // passing query conditions is permitted
    User.find().where({ name: 'vonderful' })

    // chaining
    User
    .where('age').gte(21).lte(65)
    .where('name', /^vonderful/i)
    .where('friends').slice(10)
    .exec()
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">any</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line330">line 330</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="where"><span class="type-signature"></span>where<span class="signature">(path<span class="signature-attributes">opt</span>, val<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `path` for use with chaining.

#### Example:

    // instead of writing:
    await User.find({age: {$gte: 21, $lte: 65}});

    // we can instead write:
    User.where('age').gte(21).lte(65);

    // passing query conditions is permitted
    User.find().where({ name: 'vonderful' })

    // chaining
    await User
      .where('age').gte(21).lte(65)
      .where('name', /^vonderful/i)
      .where('friends').slice(10)
      .exec()
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line268">line 268</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="within"><span class="type-signature"></span>within<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Defines a `$within` or `$geoWithin` argument for geo-spatial queries.

#### Example:

    query.where(path).within().box()
    query.where(path).within().circle()
    query.where(path).within().geometry()

    query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });
    query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });
    query.where('loc').within({ polygon: [[],[],[],[]] });

    query.where('loc').within([], [], []) // polygon
    query.where('loc').within([], []) // box
    query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry

**MUST** be used after `where()`.

#### Note:

As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).

#### Note:

In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line794">line 794</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>$polygon https://www.mongodb.com/docs/manual/reference/operator/polygon/</li>
        
            <li>$box https://www.mongodb.com/docs/manual/reference/operator/box/</li>
        
            <li>$geometry https://www.mongodb.com/docs/manual/reference/operator/geometry/</li>
        
            <li>$center https://www.mongodb.com/docs/manual/reference/operator/center/</li>
        
            <li>$centerSphere https://www.mongodb.com/docs/manual/reference/operator/centerSphere/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="within"><span class="type-signature"></span>within<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sugar for geo-spatial queries.

#### Example:

    query.within().box()
    query.within().circle()
    query.within().geometry()

    query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });
    query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });
    query.where('loc').within({ polygon: [[],[],[],[]] });

    query.where('loc').within([], [], []) // polygon
    query.where('loc').within([], []) // box
    query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry

#### Note:

Must be used after `where()`.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line733">line 733</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="writeConcern"><span class="type-signature"></span>writeConcern<span class="signature">(writeConcern)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the 3 write concern parameters for this query:

- `w`: Sets the specified number of `mongod` servers, or tag set of `mongod` servers, that must acknowledge this write before this write is considered successful.
- `j`: Boolean, set to `true` to request acknowledgement that this operation has been persisted to MongoDB's on-disk journal.
- `wtimeout`: If [`w > 1`](#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is `0`, which means no timeout.

This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndReplace()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to the schema's [`writeConcern` option](/docs/guide.html#writeConcern)

#### Example:

    // The 'majority' option means the `deleteOne()` promise won't resolve
    // until the `deleteOne()` has propagated to the majority of the replica set
    await mongoose.model('Person').
      deleteOne({ name: 'Ned Stark' }).
      writeConcern({ w: 'majority' });
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>writeConcern</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last">the write concern value to set</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1257">line 1257</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>WriteConcernSettings https://mongodb.github.io/node-mongodb-native/4.9/interfaces/WriteConcernSettings.html</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="writeConcern"><span class="type-signature"></span>writeConcern<span class="signature">(concern)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the specified number of `mongod` servers, or tag set of `mongod` servers,
that must acknowledge this write before this write is considered successful.
This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to the `w` value if it is specified in writeConcern options

#### Example:

    mquery().writeConcern(0)
    mquery().writeConcern(1)
    mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })
    mquery().writeConcern('majority')
    mquery().writeConcern('m') // same as majority
    mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead
    mquery().w(1) // w is alias of writeConcern
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>concern</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">number</span>
|

<span class="param-type"><a href="global.html#object">object</a></span>


            
            </td>

            

            

            <td class="description last">0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1692">line 1692</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="wtimeout"><span class="type-signature"></span>wtimeout<span class="signature">(ms)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    If [`w > 1`](#query_Query-w), the maximum amount of time to
wait for this write to propagate through the replica set before this
operation fails. The default is `0`, which means no timeout.

This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndReplace()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)

#### Example:

    // The `deleteOne()` promise won't resolve until this `deleteOne()` has
    // propagated to at least `w = 2` members of the replica set. If it takes
    // longer than 1 second, this `deleteOne()` will fail.
    await mongoose.model('Person').
      deleteOne({ name: 'Ned Stark' }).
      w(2).
      wtimeout(1000);
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>ms</code></td>
            

            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">number of milliseconds to wait</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1386">line 1386</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://www.mongodb.com/docs/manual/reference/write-concern/#wtimeout</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="wtimeout"><span class="type-signature"></span>wtimeout<span class="signature">(ms)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a time limit, in milliseconds, for the write concern.
If `ms > 1`, it is maximum amount of time to wait for this write
to propagate through the replica set before this operation fails.
The default is `0`, which means no timeout.

This option is only valid for operations that write to the database:

- `deleteOne()`
- `deleteMany()`
- `findOneAndDelete()`
- `findOneAndUpdate()`
- `updateOne()`
- `updateMany()`

Defaults to `wtimeout` value if it is specified in writeConcern

#### Example:

    mquery().w(2).j(true).wtimeout(2000)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>ms</code></td>
            

            <td class="type">
            
                
<span class="param-type">number</span>


            
            </td>

            

            

            <td class="description last">number of milliseconds to wait</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1736">line 1736</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".$where"><span class="type-signature">(static) </span>$where<span class="signature">(js)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Specifies a `$where` condition

Use `$where` when you need to select documents using a JavaScript expression.

#### Example:

    query.$where('this.comments.length > 10 || this.name.length > 5')

    query.$where(function () {
      return this.comments.length > 10 || this.name.length > 5;
    })
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>js</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">function</span>


            
            </td>

            

            

            <td class="description last">javascript string or function</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line216">line 216</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="._ensurePath"><span class="type-signature">(static) </span>_ensurePath<span class="signature">(method)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Makes sure _path is set.

This method is inherited by `mquery`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>method</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1891">line 1891</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="._fieldsForExec"><span class="type-signature">(static) </span>_fieldsForExec<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Returns fields selection for this query.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1821">line 1821</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="._findOneAndDelete"><span class="type-signature">(static) </span>_findOneAndDelete<span class="signature">()</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Execute a `findOneAndDelete()` query
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3399">line 3399</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id="._findOneAndUpdate"><span class="type-signature">(static) </span>_findOneAndUpdate<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Execute a findOneAndUpdate operation
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3200">line 3200</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id="._updateForExec"><span class="type-signature">(static) </span>_updateForExec<span class="signature">()</span><span class="type-signature"> &rarr; {Object}</span></h4>
    

    



<div class="description">
    Return an update document with corrected `$set` operations.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1841">line 1841</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Object</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".all"><span class="type-signature">(static) </span>all<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies an $all query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line491">line 491</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".batchSize"><span class="type-signature">(static) </span>batchSize<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the batchSize option.

#### Example:

    query.batchSize(100)

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1385">line 1385</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".canMerge"><span class="type-signature">(static) </span>canMerge<span class="signature">(conds)</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Determines if `conds` can be merged using `mquery().merge()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>conds</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2677">line 2677</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".comment"><span class="type-signature">(static) </span>comment<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the `comment` option.

#### Example:

    query.comment('login query')

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1402">line 1402</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".findOneAndDelete"><span class="type-signature">(static) </span>findOneAndDelete<span class="signature">(conditions<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Issues a MongoDB [findOneAndDelete](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOneAndDelete/) command.

Finds a matching document, removes it, and returns the found document (if any).

This function triggers the following middleware.

- `findOneAndDelete()`

#### Available options

- `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
- `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0
- `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)

#### Callback Signature

    function(error, doc) {
      // error: any errors that occurred
      // doc: the document before updates are applied if `new: false`, or after updates if `new = true`
    }

#### Example:

    A.where().findOneAndDelete(conditions, options)  // return Query
    A.where().findOneAndDelete(conditions) // returns Query
    A.where().findOneAndDelete()           // returns Query
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>conditions</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>rawResult</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The session associated with this query. See [transactions docs](/docs/transactions.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3339">line 3339</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>findAndModify command https://www.mongodb.com/docs/manual/reference/command/findAndModify/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".findOneAndReplace"><span class="type-signature">(static) </span>findOneAndReplace<span class="signature">(filter<span class="signature-attributes">opt</span>, replacement<span class="signature-attributes">opt</span>, options<span class="signature-attributes">opt</span>)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Issues a MongoDB [findOneAndReplace](https://www.mongodb.com/docs/manual/reference/method/db.collection.findOneAndReplace/) command.

Finds a matching document, removes it, and returns the found document (if any).

This function triggers the following middleware.

- `findOneAndReplace()`

#### Available options

- `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
- `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0
- `rawResult`: if true, resolves to the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)

#### Callback Signature

    function(error, doc) {
      // error: any errors that occurred
      // doc: the document before updates are applied if `new: false`, or after updates if `new = true`
    }

#### Example:

    A.where().findOneAndReplace(filter, replacement, options); // return Query
    A.where().findOneAndReplace(filter); // returns Query
    A.where().findOneAndReplace(); // returns Query
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>filter</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>replacement</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>options</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last">
                <h6>Properties</h6>
                

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        
        <th>Default</th>
        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>rawResult</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">if true, returns the [raw result from the MongoDB driver](https://mongodb.github.io/node-mongodb-native/4.9/interfaces/ModifyResult.html)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The session associated with this query. See [transactions docs](/docs/transactions.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>new</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    false
                
                </td>
            

            <td class="description last">By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>lean</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>session</code></td>
            

            <td class="type">
            
                
<span class="param-type"><a href="ClientSession.html">ClientSession</a></span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">The session associated with this query. See [transactions docs](/docs/transactions.html).</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>strict</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>
|

<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                </td>
            

            <td class="description last">overwrites the schema's [strict mode option](https://mongoosejs.com/docs/guide.html#strict)</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>timestamps</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.</td>
        </tr>

    

        <tr>
            
                <td class="name"><code>returnOriginal</code></td>
            

            <td class="type">
            
                
<span class="param-type">Boolean</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            
                <td class="default">
                
                    null
                
                </td>
            

            <td class="description last">An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.</td>
        </tr>

    
    </tbody>
</table>

            </td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line3443">line 3443</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".getRequestId"><span class="type-signature">(static) </span>getRequestId<span class="signature">()</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Increment then return next request Id.
</div>













<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongodb_lib_cmap_commands.js.html">node_modules/mongodb/lib/cmap/commands.js</a>, <a href="node_modules_mongodb_lib_cmap_commands.js.html#line78">line 78</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".gt"><span class="type-signature">(static) </span>gt<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $gt query condition.

When called with one argument, the most recent path passed to `where()` is used.

#### Example:

    Thing.find().where('age').gt(21)

    // or
    Thing.find().gt('age', 21)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line400">line 400</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".gte"><span class="type-signature">(static) </span>gte<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $gte query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line419">line 419</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".in"><span class="type-signature">(static) </span>in<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies an $in query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line467">line 467</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".limit"><span class="type-signature">(static) </span>limit<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the limit option.

#### Example:

    query.limit(20)

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1351">line 1351</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".lt"><span class="type-signature">(static) </span>lt<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $lt query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line431">line 431</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".lte"><span class="type-signature">(static) </span>lte<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $lte query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line443">line 443</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".maxDistance"><span class="type-signature">(static) </span>maxDistance<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $maxDistance query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line527">line 527</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".maxTime"><span class="type-signature">(static) </span>maxTime<span class="signature">(ms)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the maxTimeMS option.

#### Example:

    query.maxTime(100)
    query.maxTimeMS(100)
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>ms</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1436">line 1436</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS</li>
        </ul>
    </dd>
    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".ne"><span class="type-signature">(static) </span>ne<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $ne query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line455">line 455</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".nin"><span class="type-signature">(static) </span>nin<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies an $nin query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line479">line 479</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".readConcern"><span class="type-signature">(static) </span>readConcern<span class="signature">(level)</span><span class="type-signature"> &rarr; {<a href="global.html#Query">Query</a>}</span></h4>
    

    



<div class="description">
    Sets the readConcern option for the query.

#### Example:

    new Query().readConcern('local')
    new Query().readConcern('l')  // same as local

    new Query().readConcern('available')
    new Query().readConcern('a')  // same as available

    new Query().readConcern('majority')
    new Query().readConcern('m')  // same as majority

    new Query().readConcern('linearizable')
    new Query().readConcern('lz') // same as linearizable

    new Query().readConcern('snapshot')
    new Query().readConcern('s')  // same as snapshot


#### Read Concern Level:

```
local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).
available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).
majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.
linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.
snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern "majority", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.
```

Aliases

```
l   local
a   available
m   majority
lz  linearizable
s   snapshot
```

Read more about how to use read concern [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>level</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            

            

            <td class="description last">one of the listed read concern level or their aliases</td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mongoose_lib_query.js.html">node_modules/mongoose/lib/query.js</a>, <a href="node_modules_mongoose_lib_query.js.html#line1434">line 1434</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb https://www.mongodb.com/docs/manual/reference/read-concern/</li>
        </ul>
    </dd>
    

    
</dl>















<h5>Returns:</h5>

        
<div class="param-desc">
    this
</div>



<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type"><a href="global.html#Query">Query</a></span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".regex"><span class="type-signature">(static) </span>regex<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $regex query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>
|

<span class="param-type">RegExp</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line515">line 515</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".setGlobalTraceFunction"><span class="type-signature">(static) </span>setGlobalTraceFunction<span class="signature">(conds)</span><span class="type-signature"> &rarr; {Boolean}</span></h4>
    

    



<div class="description">
    Set a trace function that will get called whenever a
query is executed.

See `setTraceFunction()` for details.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>conds</code></td>
            

            <td class="type">
            
                
<span class="param-type">Object</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line2690">line 2690</a>
    </li></ul></dd>
    

    

    

    
</dl>















<h5>Returns:</h5>

        


<dl>
    <dt>
        Type
    </dt>
    <dd>
        
<span class="param-type">Boolean</span>


    </dd>
</dl>

    





        
            

    

    
    <h4 class="name" id=".size"><span class="type-signature">(static) </span>size<span class="signature">(path<span class="signature-attributes">opt</span>, val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies a $size query condition.

When called with one argument, the most recent path passed to `where()` is used.
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        
        <th>Attributes</th>
        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>path</code></td>
            

            <td class="type">
            
                
<span class="param-type">String</span>


            
            </td>

            
                <td class="attributes">
                
                    &lt;optional><br>
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            
                <td class="attributes">
                

                

                
                </td>
            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line503">line 503</a>
    </li></ul></dd>
    

    

    

    
</dl>




















        
            

    

    
    <h4 class="name" id=".skip"><span class="type-signature">(static) </span>skip<span class="signature">(val)</span><span class="type-signature"></span></h4>
    

    



<div class="description">
    Specifies the skip option.

#### Example:

    query.skip(100).limit(20)

#### Note:

Cannot be used with `distinct()`
</div>









    <h5>Parameters:</h5>
    

<table class="params">
    <thead>
    <tr>
        
        <th>Name</th>
        

        <th>Type</th>

        

        

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    

        <tr>
            
                <td class="name"><code>val</code></td>
            

            <td class="type">
            
                
<span class="param-type">Number</span>


            
            </td>

            

            

            <td class="description last"></td>
        </tr>

    
    </tbody>
</table>






<dl class="details">

    

    

    

    

    

    

    

    

    

    

    

    

    
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="node_modules_mquery_lib_mquery.js.html">node_modules/mquery/lib/mquery.js</a>, <a href="node_modules_mquery_lib_mquery.js.html#line1368">line 1368</a>
    </li></ul></dd>
    

    

    
    <dt class="tag-see">See:</dt>
    <dd class="tag-see">
        <ul>
            <li>mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D</li>
        </ul>
    </dd>
    

    
</dl>




















        
    

    

    
</article>

</section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Classes</h3><ul><li><a href="AbstractCursor.html">AbstractCursor</a></li><li><a href="AbstractOperation.html">AbstractOperation</a></li><li><a href="AddUserOperation.html">AddUserOperation</a></li><li><a href="Admin.html">Admin</a></li><li><a href="Agent.html">Agent</a></li><li><a href="AggregateOperation.html">AggregateOperation</a></li><li><a href="AggregationCursor.html">AggregationCursor</a></li><li><a href="AuthContext.html">AuthContext</a></li><li><a href="AuthenticationError.html">AuthenticationError</a></li><li><a href="Batch.html">Batch</a></li><li><a href="BinMsg.html">BinMsg</a></li><li><a href="BufferPool.html">BufferPool</a></li><li><a href="BulkOperationBase.html">BulkOperationBase</a></li><li><a href="BulkWriteOperation.html">BulkWriteOperation</a></li><li><a href="BulkWriteResult.html">BulkWriteResult</a></li><li><a href="BulkWriteShimOperation.html">BulkWriteShimOperation</a></li><li><a href="CancellationToken.html">CancellationToken</a></li><li><a href="global.html#CastError">CastError</a></li><li><a href="ChangeStream.html">ChangeStream</a></li><li><a href="ChangeStreamCursor.html">ChangeStreamCursor</a></li><li><a href="ClientSession.html">ClientSession</a></li><li><a href="CollStatsOperation.html">CollStatsOperation</a></li><li><a href="global.html#Collection">Collection</a></li><li><a href="CollectionsOperation.html">CollectionsOperation</a></li><li><a href="CommandFailedEvent.html">CommandFailedEvent</a></li><li><a href="CommandOperation.html">CommandOperation</a></li><li><a href="CommandStartedEvent.html">CommandStartedEvent</a></li><li><a href="CommandSucceededEvent.html">CommandSucceededEvent</a></li><li><a href="Connection.html">Connection</a></li><li><a href="ConnectionCheckOutFailedEvent.html">ConnectionCheckOutFailedEvent</a></li><li><a href="ConnectionCheckOutStartedEvent.html">ConnectionCheckOutStartedEvent</a></li><li><a href="ConnectionCheckedInEvent.html">ConnectionCheckedInEvent</a></li><li><a href="ConnectionCheckedOutEvent.html">ConnectionCheckedOutEvent</a></li><li><a href="ConnectionClosedEvent.html">ConnectionClosedEvent</a></li><li><a href="ConnectionCreatedEvent.html">ConnectionCreatedEvent</a></li><li><a href="ConnectionPool.html">ConnectionPool</a></li><li><a href="ConnectionPoolClearedEvent.html">ConnectionPoolClearedEvent</a></li><li><a href="ConnectionPoolClosedEvent.html">ConnectionPoolClosedEvent</a></li><li><a href="ConnectionPoolCreatedEvent.html">ConnectionPoolCreatedEvent</a></li><li><a href="ConnectionPoolMetrics.html">ConnectionPoolMetrics</a></li><li><a href="ConnectionPoolMonitoringEvent.html">ConnectionPoolMonitoringEvent</a></li><li><a href="ConnectionPoolReadyEvent.html">ConnectionPoolReadyEvent</a></li><li><a href="ConnectionReadyEvent.html">ConnectionReadyEvent</a></li><li><a href="ContentDisposition.html">ContentDisposition</a></li><li><a href="CountDocumentsOperation.html">CountDocumentsOperation</a></li><li><a href="CountOperation.html">CountOperation</a></li><li><a href="CreateCollectionOperation.html">CreateCollectionOperation</a></li><li><a href="CreateIndexOperation.html">CreateIndexOperation</a></li><li><a href="CreateIndexesOperation.html">CreateIndexesOperation</a></li><li><a href="CryptoConnection.html">CryptoConnection</a></li><li><a href="Db.html">Db</a></li><li><a href="DbStatsOperation.html">DbStatsOperation</a></li><li><a href="global.html#Decimal128">Decimal128</a></li><li><a href="DeleteOperation.html">DeleteOperation</a></li><li><a href="DistinctOperation.html">DistinctOperation</a></li><li><a href="DivergentArrayError.html">DivergentArrayError</a></li><li><a href="DocumentNotFoundError.html">DocumentNotFoundError</a></li><li><a href="DropCollectionOperation.html">DropCollectionOperation</a></li><li><a href="DropDatabaseOperation.html">DropDatabaseOperation</a></li><li><a href="DropIndexOperation.html">DropIndexOperation</a></li><li><a href="DropIndexesOperation.html">DropIndexesOperation</a></li><li><a href="EachAsyncMultiError.html">EachAsyncMultiError</a></li><li><a href="Encrypter.html">Encrypter</a></li><li><a href="EnsureIndexOperation.html">EnsureIndexOperation</a></li><li><a href="global.html#Error">Error</a></li><li><a href="EstimatedDocumentCountOperation.html">EstimatedDocumentCountOperation</a></li><li><a href="EvalOperation.html">EvalOperation</a></li><li><a href="Explain.html">Explain</a></li><li><a href="FindAndModifyOperation.html">FindAndModifyOperation</a></li><li><a href="FindCursor.html">FindCursor</a></li><li><a href="FindOneAndDeleteOperation.html">FindOneAndDeleteOperation</a></li><li><a href="FindOneAndReplaceOperation.html">FindOneAndReplaceOperation</a></li><li><a href="FindOneAndUpdateOperation.html">FindOneAndUpdateOperation</a></li><li><a href="FindOperation.html">FindOperation</a></li><li><a href="FindOperators.html">FindOperators</a></li><li><a href="GetMoreOperation.html">GetMoreOperation</a></li><li><a href="GridFSBucket.html">GridFSBucket</a></li><li><a href="GridFSBucketReadStream.html">GridFSBucketReadStream</a></li><li><a href="GridFSBucketWriteStream.html">GridFSBucketWriteStream</a></li><li><a href="Headers.html">Headers</a></li><li><a href="HostAddress.html">HostAddress</a></li><li><a href="HttpsProxyAgent.html">HttpsProxyAgent</a></li><li><a href="IndexExistsOperation.html">IndexExistsOperation</a></li><li><a href="IndexInformationOperation.html">IndexInformationOperation</a></li><li><a href="IndexesOperation.html">IndexesOperation</a></li><li><a href="InsertManyOperation.html">InsertManyOperation</a></li><li><a href="InsertOperation.html">InsertOperation</a></li><li><a href="IsCappedOperation.html">IsCappedOperation</a></li><li><a href="List.html">List</a></li><li><a href="ListCollectionsCursor.html">ListCollectionsCursor</a></li><li><a href="ListCollectionsOperation.html">ListCollectionsOperation</a></li><li><a href="ListDatabasesOperation.html">ListDatabasesOperation</a></li><li><a href="ListIndexesCursor.html">ListIndexesCursor</a></li><li><a href="ListIndexesOperation.html">ListIndexesOperation</a></li><li><a href="MessageStream.html">MessageStream</a></li><li><a href="MissingSchemaError.html">MissingSchemaError</a></li><li><a href="MongoAPIError.html">MongoAPIError</a></li><li><a href="MongoAWSError.html">MongoAWSError</a></li><li><a href="MongoBatchReExecutionError.html">MongoBatchReExecutionError</a></li><li><a href="MongoBulkWriteError.html">MongoBulkWriteError</a></li><li><a href="MongoChangeStreamError.html">MongoChangeStreamError</a></li><li><a href="MongoClient.html">MongoClient</a></li><li><a href="MongoCompatibilityError.html">MongoCompatibilityError</a></li><li><a href="MongoCredentials.html">MongoCredentials</a></li><li><a href="MongoCursorExhaustedError.html">MongoCursorExhaustedError</a></li><li><a href="MongoCursorInUseError.html">MongoCursorInUseError</a></li><li><a href="MongoDBNamespace.html">MongoDBNamespace</a></li><li><a href="MongoDecompressionError.html">MongoDecompressionError</a></li><li><a href="MongoDriverError.html">MongoDriverError</a></li><li><a href="MongoError.html">MongoError</a></li><li><a href="MongoExpiredSessionError.html">MongoExpiredSessionError</a></li><li><a href="MongoGridFSChunkError.html">MongoGridFSChunkError</a></li><li><a href="MongoGridFSStreamError.html">MongoGridFSStreamError</a></li><li><a href="MongoInvalidArgumentError.html">MongoInvalidArgumentError</a></li><li><a href="MongoKerberosError.html">MongoKerberosError</a></li><li><a href="MongoLogger.html">MongoLogger</a></li><li><a href="MongoMissingCredentialsError.html">MongoMissingCredentialsError</a></li><li><a href="MongoMissingDependencyError.html">MongoMissingDependencyError</a></li><li><a href="MongoNetworkError.html">MongoNetworkError</a></li><li><a href="MongoNetworkTimeoutError.html">MongoNetworkTimeoutError</a></li><li><a href="MongoNotConnectedError.html">MongoNotConnectedError</a></li><li><a href="MongoParseError.html">MongoParseError</a></li><li><a href="MongoRuntimeError.html">MongoRuntimeError</a></li><li><a href="MongoServerClosedError.html">MongoServerClosedError</a></li><li><a href="MongoServerError.html">MongoServerError</a></li><li><a href="MongoServerSelectionError.html">MongoServerSelectionError</a></li><li><a href="MongoSystemError.html">MongoSystemError</a></li><li><a href="MongoTailableCursorError.html">MongoTailableCursorError</a></li><li><a href="MongoTopologyClosedError.html">MongoTopologyClosedError</a></li><li><a href="MongoTransactionError.html">MongoTransactionError</a></li><li><a href="MongoUnexpectedServerResponseError.html">MongoUnexpectedServerResponseError</a></li><li><a href="MongoWriteConcernError.html">MongoWriteConcernError</a></li><li><a href="Monitor.html">Monitor</a></li><li><a href="MonitorInterval.html">MonitorInterval</a></li><li><a href="Msg.html">Msg</a></li><li><a href="ObjectExpectedError.html">ObjectExpectedError</a></li><li><a href="global.html#ObjectId">ObjectId</a></li><li><a href="ObjectParameterError.html">ObjectParameterError</a></li><li><a href="OptionsOperation.html">OptionsOperation</a></li><li><a href="OrderedBulkOperation.html">OrderedBulkOperation</a></li><li><a href="OverwriteModelError.html">OverwriteModelError</a></li><li><a href="ParallelSaveError.html">ParallelSaveError</a></li><li><a href="ParallelValidateError.html">ParallelValidateError</a></li><li><a href="PoolClearedError.html">PoolClearedError</a></li><li><a href="PoolClearedOnNetworkError.html">PoolClearedOnNetworkError</a></li><li><a href="PoolClosedError.html">PoolClosedError</a></li><li><a href="ProfilingLevelOperation.html">ProfilingLevelOperation</a></li><li><a href="global.html#Query">Query</a></li><li><a href="RTTPinger.html">RTTPinger</a></li><li><a href="ReadConcern.html">ReadConcern</a></li><li><a href="ReadPreference.html">ReadPreference</a></li><li><a href="RemoveUserOperation.html">RemoveUserOperation</a></li><li><a href="RenameOperation.html">RenameOperation</a></li><li><a href="ReplaceOneOperation.html">ReplaceOneOperation</a></li><li><a href="global.html#Request">Request</a></li><li><a href="Response.html">Response</a></li><li><a href="Result.html">Result</a></li><li><a href="RunCommandOperation.html">RunCommandOperation</a></li><li><a href="SchemaArrayOptions.html">SchemaArrayOptions</a></li><li><a href="SchemaBufferOptions.html">SchemaBufferOptions</a></li><li><a href="SchemaDateOptions.html">SchemaDateOptions</a></li><li><a href="SchemaDocumentOptions.html">SchemaDocumentOptions</a></li><li><a href="SchemaMapOptions.html">SchemaMapOptions</a></li><li><a href="SchemaNumberOptions.html">SchemaNumberOptions</a></li><li><a href="SchemaObjectIdOptions.html">SchemaObjectIdOptions</a></li><li><a href="SchemaStringOptions.html">SchemaStringOptions</a></li><li><a href="SchemaSubdocumentOptions.html">SchemaSubdocumentOptions</a></li><li><a href="global.html#SchemaTypeOptions">SchemaTypeOptions</a></li><li><a href="Server.html">Server</a></li><li><a href="ServerCapabilities.html">ServerCapabilities</a></li><li><a href="ServerClosedEvent.html">ServerClosedEvent</a></li><li><a href="ServerDescription.html">ServerDescription</a></li><li><a href="ServerDescriptionChangedEvent.html">ServerDescriptionChangedEvent</a></li><li><a href="ServerHeartbeatFailedEvent.html">ServerHeartbeatFailedEvent</a></li><li><a href="ServerHeartbeatStartedEvent.html">ServerHeartbeatStartedEvent</a></li><li><a href="ServerHeartbeatSucceededEvent.html">ServerHeartbeatSucceededEvent</a></li><li><a href="ServerOpeningEvent.html">ServerOpeningEvent</a></li><li><a href="ServerSession.html">ServerSession</a></li><li><a href="ServerSessionPool.html">ServerSessionPool</a></li><li><a href="SetOptionError.html">SetOptionError</a></li><li><a href="SetOptionInnerError.html">SetOptionInnerError</a></li><li><a href="SetProfilingLevelOperation.html">SetProfilingLevelOperation</a></li><li><a href="SmartBuffer.html">SmartBuffer</a></li><li><a href="SocksClientError.html">SocksClientError</a></li><li><a href="SrvPoller.html">SrvPoller</a></li><li><a href="SrvPollingEvent.html">SrvPollingEvent</a></li><li><a href="global.html#Strategy">Strategy</a></li><li><a href="StreamDescription.html">StreamDescription</a></li><li><a href="StrictModeError.html">StrictModeError</a></li><li><a href="StrictPopulateError.html">StrictPopulateError</a></li><li><a href="SyncIndexesError.html">SyncIndexesError</a></li><li><a href="Topology.html">Topology</a></li><li><a href="TopologyClosedEvent.html">TopologyClosedEvent</a></li><li><a href="TopologyDescription.html">TopologyDescription</a></li><li><a href="TopologyDescriptionChangedEvent.html">TopologyDescriptionChangedEvent</a></li><li><a href="TopologyOpeningEvent.html">TopologyOpeningEvent</a></li><li><a href="Transaction.html">Transaction</a></li><li><a href="TypedEventEmitter.html">TypedEventEmitter</a></li><li><a href="UnorderedBulkOperation.html">UnorderedBulkOperation</a></li><li><a href="UpdateManyOperation.html">UpdateManyOperation</a></li><li><a href="UpdateOneOperation.html">UpdateOneOperation</a></li><li><a href="UpdateOperation.html">UpdateOperation</a></li><li><a href="ValidateCollectionOperation.html">ValidateCollectionOperation</a></li><li><a href="ValidationError.html">ValidationError</a></li><li><a href="ValidatorError.html">ValidatorError</a></li><li><a href="VersionError.html">VersionError</a></li><li><a href="WaitQueueTimeoutError.html">WaitQueueTimeoutError</a></li><li><a href="WriteConcern.html">WriteConcern</a></li><li><a href="WriteConcernError.html">WriteConcernError</a></li><li><a href="WriteError.html">WriteError</a></li><li><a href="-_.html">_</a></li></ul><h3>Events</h3><ul><li><a href="AbstractCursor.html#.event:CLOSE">CLOSE</a></li><li><a href="ChangeStream.html#.event:CHANGE">CHANGE</a></li><li><a href="ChangeStream.html#.event:CLOSE">CLOSE</a></li><li><a href="ChangeStream.html#.event:END">END</a></li><li><a href="ChangeStream.html#.event:ERROR">ERROR</a></li><li><a href="ChangeStream.html#.event:INIT">INIT</a></li><li><a href="ChangeStream.html#.event:MORE">MORE</a></li><li><a href="ChangeStream.html#.event:RESPONSE">RESPONSE</a></li><li><a href="ChangeStream.html#.event:RESUME_TOKEN_CHANGED">RESUME_TOKEN_CHANGED</a></li><li><a href="Connection.html#.event:CLOSE">CLOSE</a></li><li><a href="Connection.html#.event:CLUSTER_TIME_RECEIVED">CLUSTER_TIME_RECEIVED</a></li><li><a href="Connection.html#.event:COMMAND_FAILED">COMMAND_FAILED</a></li><li><a href="Connection.html#.event:COMMAND_STARTED">COMMAND_STARTED</a></li><li><a href="Connection.html#.event:COMMAND_SUCCEEDED">COMMAND_SUCCEEDED</a></li><li><a href="Connection.html#.event:MESSAGE">MESSAGE</a></li><li><a href="Connection.html#.event:PINNED">PINNED</a></li><li><a href="Connection.html#.event:UNPINNED">UNPINNED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_CHECKED_IN">CONNECTION_CHECKED_IN</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_CHECKED_OUT">CONNECTION_CHECKED_OUT</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_CHECK_OUT_FAILED">CONNECTION_CHECK_OUT_FAILED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_CHECK_OUT_STARTED">CONNECTION_CHECK_OUT_STARTED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_CLOSED">CONNECTION_CLOSED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_CREATED">CONNECTION_CREATED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_POOL_CLEARED">CONNECTION_POOL_CLEARED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_POOL_CLOSED">CONNECTION_POOL_CLOSED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_POOL_CREATED">CONNECTION_POOL_CREATED</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_POOL_READY">CONNECTION_POOL_READY</a></li><li><a href="ConnectionPool.html#.event:CONNECTION_READY">CONNECTION_READY</a></li><li><a href="GridFSBucket.html#.event:INDEX">INDEX</a></li><li><a href="GridFSBucketReadStream.html#.event:CLOSE">CLOSE</a></li><li><a href="GridFSBucketReadStream.html#.event:DATA">DATA</a></li><li><a href="GridFSBucketReadStream.html#.event:END">END</a></li><li><a href="GridFSBucketReadStream.html#.event:ERROR">ERROR</a></li><li><a href="GridFSBucketReadStream.html#.event:FILE">FILE</a></li><li><a href="GridFSBucketWriteStream.html#.event:CLOSE">CLOSE</a></li><li><a href="GridFSBucketWriteStream.html#.event:ERROR">ERROR</a></li><li><a href="GridFSBucketWriteStream.html#.event:FINISH">FINISH</a></li><li><a href="Server.html#.event:CLOSED">CLOSED</a></li><li><a href="Server.html#.event:CONNECT">CONNECT</a></li><li><a href="Server.html#.event:DESCRIPTION_RECEIVED">DESCRIPTION_RECEIVED</a></li><li><a href="Server.html#.event:ENDED">ENDED</a></li><li><a href="Server.html#.event:SERVER_HEARTBEAT_FAILED">SERVER_HEARTBEAT_FAILED</a></li><li><a href="Server.html#.event:SERVER_HEARTBEAT_STARTED">SERVER_HEARTBEAT_STARTED</a></li><li><a href="Server.html#.event:SERVER_HEARTBEAT_SUCCEEDED">SERVER_HEARTBEAT_SUCCEEDED</a></li><li><a href="SrvPoller.html#.event:SRV_RECORD_DISCOVERY">SRV_RECORD_DISCOVERY</a></li><li><a href="Topology.html#.event:CLOSE">CLOSE</a></li><li><a href="Topology.html#.event:CONNECT">CONNECT</a></li><li><a href="Topology.html#.event:ERROR">ERROR</a></li><li><a href="Topology.html#.event:OPEN">OPEN</a></li><li><a href="Topology.html#.event:SERVER_CLOSED">SERVER_CLOSED</a></li><li><a href="Topology.html#.event:SERVER_DESCRIPTION_CHANGED">SERVER_DESCRIPTION_CHANGED</a></li><li><a href="Topology.html#.event:SERVER_OPENING">SERVER_OPENING</a></li><li><a href="Topology.html#.event:TIMEOUT">TIMEOUT</a></li><li><a href="Topology.html#.event:TOPOLOGY_CLOSED">TOPOLOGY_CLOSED</a></li><li><a href="Topology.html#.event:TOPOLOGY_DESCRIPTION_CHANGED">TOPOLOGY_DESCRIPTION_CHANGED</a></li><li><a href="Topology.html#.event:TOPOLOGY_OPENING">TOPOLOGY_OPENING</a></li><li><a href="%2560index-single-done%2560_%2520Emitted%2520when%2520an%2520individual%2520index%2520finishes%2520within%2520%2560Model_ensureIndexes%2560.%2520If%2520an%2520error%2520occurred%2520it%2520is%2520passed%2520with%2520the%2520event.%2520The%2520fields,%2520options.html#event:andindexnamearealsopassed."> and index name are also passed.</a></li><li><a href="global.html#event:%2560end%2560:Emittedwhenthestreamisexhausted">`end`: Emitted when the stream is exhausted</a></li><li><a href="global.html#event:%2560fullsetup%2560:Emittedafterthedriverhasconnectedtoprimaryandallsecondariesifspecifiedintheconnectionstring.">`fullsetup`: Emitted after the driver has connected to primary and all secondaries if specified in the connection string.</a></li><li><a href="global.html#event:%2560init%2560:Emittedaftertheschemaiscompiledintoa%2560Model%2560.">`init`: Emitted after the schema is compiled into a `Model`.</a></li><li><a href="global.html#event:%2560save%2560:Emittedwhenthedocumentissuccessfullysaved">`save`: Emitted when the document is successfully saved</a></li></ul><h3>Global</h3><ul><li><a href="global.html"></a></li><li><a href="global.html#$__save">$__save</a></li><li><a href="global.html#$format">$format</a></li><li><a href="global.html#$model">$model</a></li><li><a href="global.html#$parent">$parent</a></li><li><a href="global.html#$print">$print</a></li><li><a href="global.html#$withinCmd">$withinCmd</a></li><li><a href="global.html#APM_EVENTS">APM_EVENTS</a></li><li><a href="global.html#AUTH_MECHS_AUTH_SRC_EXTERNAL">AUTH_MECHS_AUTH_SRC_EXTERNAL</a></li><li><a href="global.html#AbortError">AbortError</a></li><li><a href="global.html#Accepts">Accepts</a></li><li><a href="global.html#Aggregate">Aggregate</a></li><li><a href="global.html#ArraySubdocument">ArraySubdocument</a></li><li><a href="global.html#AuthMechanism">AuthMechanism</a></li><li><a href="global.html#Authenticator">Authenticator</a></li><li><a href="global.html#AutoEncryptionLoggerLevel">AutoEncryptionLoggerLevel</a></li><li><a href="global.html#BatchType">BatchType</a></li><li><a href="global.html#Body">Body</a></li><li><a href="global.html#Buffer">Buffer</a></li><li><a href="global.html#CLONE_DEEP_FLAG">CLONE_DEEP_FLAG</a></li><li><a href="global.html#CLONE_SYMBOLS_FLAG">CLONE_SYMBOLS_FLAG</a></li><li><a href="global.html#CMAP_EVENTS">CMAP_EVENTS</a></li><li><a href="global.html#CORE_ERROR_TEXT">CORE_ERROR_TEXT</a></li><li><a href="global.html#CURSOR_FLAGS">CURSOR_FLAGS</a></li><li><a href="global.html#Compressor">Compressor</a></li><li><a href="global.html#DB_AGGREGATE_COLLECTION">DB_AGGREGATE_COLLECTION</a></li><li><a href="global.html#DEFAULT_TRUNC_LENGTH">DEFAULT_TRUNC_LENGTH</a></li><li><a href="global.html#Delegator">Delegator</a></li><li><a href="global.html#DeprecationError">DeprecationError</a></li><li><a href="global.html#Document">Document</a></li><li><a href="global.html#DocumentArrayPath">DocumentArrayPath</a></li><li><a href="global.html#DocumentProvider">DocumentProvider</a></li><li><a href="global.html#ERRORS">ERRORS</a></li><li><a href="global.html#ExplainVerbosity">ExplainVerbosity</a></li><li><a href="global.html#FEATURE_FLAGS">FEATURE_FLAGS</a></li><li><a href="global.html#FIELD_NAME_REGEXP">FIELD_NAME_REGEXP</a></li><li><a href="global.html#FIRST_CHAR_REGEXP">FIRST_CHAR_REGEXP</a></li><li><a href="global.html#FLAGS">FLAGS</a></li><li><a href="global.html#FUNC_ERROR_TEXT">FUNC_ERROR_TEXT</a></li><li><a href="global.html#FetchError">FetchError</a></li><li><a href="global.html#GLIBC">GLIBC</a></li><li><a href="global.html#GSSAPICanonicalizationValue">GSSAPICanonicalizationValue</a></li><li><a href="global.html#HEARTBEAT_EVENTS">HEARTBEAT_EVENTS</a></li><li><a href="global.html#INFINITY">INFINITY</a></li><li><a href="global.html#INVALID_TEMPL_VAR_ERROR_TEXT">INVALID_TEMPL_VAR_ERROR_TEXT</a></li><li><a href="global.html#IPv4SegmentFormat">IPv4SegmentFormat</a></li><li><a href="global.html#IncomingMessageExt">IncomingMessageExt</a></li><li><a href="global.html#JwtStrategy">JwtStrategy</a></li><li><a href="global.html#Kareem">Kareem</a></li><li><a href="global.html#LEGACY_HELLO_COMMAND">LEGACY_HELLO_COMMAND</a></li><li><a href="global.html#LEGACY_HELLO_COMMAND_CAMEL_CASE">LEGACY_HELLO_COMMAND_CAMEL_CASE</a></li><li><a href="global.html#LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE">LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE</a></li><li><a href="global.html#LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE">LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE</a></li><li><a href="global.html#LEGAL_TCP_SOCKET_OPTIONS">LEGAL_TCP_SOCKET_OPTIONS</a></li><li><a href="global.html#LEGAL_TLS_SOCKET_OPTIONS">LEGAL_TLS_SOCKET_OPTIONS</a></li><li><a href="global.html#LENGTH_EAN_8">LENGTH_EAN_8</a></li><li><a href="global.html#LOCAL_SERVER_EVENTS">LOCAL_SERVER_EVENTS</a></li><li><a href="global.html#MATCHING_GROUP_REGEXP">MATCHING_GROUP_REGEXP</a></li><li><a href="global.html#MAX_ARRAY_LENGTH">MAX_ARRAY_LENGTH</a></li><li><a href="global.html#MAX_SAFE_INTEGER">MAX_SAFE_INTEGER</a></li><li><a href="global.html#MONGODB_ERROR_CODES">MONGODB_ERROR_CODES</a></li><li><a href="global.html#MONGODB_OIDC">MONGODB_OIDC</a></li><li><a href="global.html#MONGODB_WARNING_CODE">MONGODB_WARNING_CODE</a></li><li><a href="global.html#MONGO_CLIENT_EVENTS">MONGO_CLIENT_EVENTS</a></li><li><a href="global.html#MUSL">MUSL</a></li><li><a href="global.html#Mixed">Mixed</a></li><li><a href="global.html#Model">Model</a></li><li><a href="global.html#MongoErrorLabel">MongoErrorLabel</a></li><li><a href="global.html#MongoLoggableComponent">MongoLoggableComponent</a></li><li><a href="global.html#Mongoose">Mongoose</a></li><li><a href="global.html#MongooseBuffer">MongooseBuffer</a></li><li><a href="global.html#MongooseDocumentArray">MongooseDocumentArray</a></li><li><a href="global.html#NAN">NAN</a></li><li><a href="global.html#NODE_IS_RECOVERING_ERROR_MESSAGE">NODE_IS_RECOVERING_ERROR_MESSAGE</a></li><li><a href="global.html#NativeCollection">NativeCollection</a></li><li><a href="global.html#NativeConnection">NativeConnection</a></li><li><a href="global.html#Negotiator">Negotiator</a></li><li><a href="global.html#PARAM_REGEXP">PARAM_REGEXP</a></li><li><a href="global.html#Passport">Passport</a></li><li><a href="global.html#PoolState">PoolState</a></li><li><a href="global.html#ProfilingLevel">ProfilingLevel</a></li><li><a href="global.html#QESC_REGEXP">QESC_REGEXP</a></li><li><a href="global.html#QUOTE_REGEXP">QUOTE_REGEXP</a></li><li><a href="global.html#ReadConcernLevel">ReadConcernLevel</a></li><li><a href="global.html#ReadPreferenceMode">ReadPreferenceMode</a></li><li><a href="global.html#ReturnDocument">ReturnDocument</a></li><li><a href="global.html#Route">Route</a></li><li><a href="global.html#SENSITIVE_COMMANDS">SENSITIVE_COMMANDS</a></li><li><a href="global.html#SERVER_RELAY_EVENTS">SERVER_RELAY_EVENTS</a></li><li><a href="global.html#Schema">Schema</a></li><li><a href="global.html#SchemaArray">SchemaArray</a></li><li><a href="global.html#SchemaBoolean">SchemaBoolean</a></li><li><a href="global.html#SchemaBuffer">SchemaBuffer</a></li><li><a href="global.html#SchemaDate">SchemaDate</a></li><li><a href="global.html#SchemaNumber">SchemaNumber</a></li><li><a href="global.html#SchemaString">SchemaString</a></li><li><a href="global.html#SchemaType">SchemaType</a></li><li><a href="global.html#SchemaUUID">SchemaUUID</a></li><li><a href="global.html#ServerApiVersion">ServerApiVersion</a></li><li><a href="global.html#ServerType">ServerType</a></li><li><a href="global.html#SessionStrategy">SessionStrategy</a></li><li><a href="global.html#SeverityLevel">SeverityLevel</a></li><li><a href="global.html#StateMachine">StateMachine</a></li><li><a href="global.html#Subdocument">Subdocument</a></li><li><a href="global.html#SubdocumentPath">SubdocumentPath</a></li><li><a href="global.html#TOPOLOGY_EVENTS">TOPOLOGY_EVENTS</a></li><li><a href="global.html#TYPE_REGEXP">TYPE_REGEXP</a></li><li><a href="global.html#TopologyType">TopologyType</a></li><li><a href="global.html#TxnState">TxnState</a></li><li><a href="global.html#Types">Types</a></li><li><a href="global.html#View">View</a></li><li><a href="global.html#VirtualType">VirtualType</a></li><li><a href="global.html#WRAP_ARY_FLAG">WRAP_ARY_FLAG</a></li><li><a href="global.html#WRAP_BIND_FLAG">WRAP_BIND_FLAG</a></li><li><a href="global.html#WRAP_CURRY_FLAG">WRAP_CURRY_FLAG</a></li><li><a href="global.html#WRAP_CURRY_RIGHT_FLAG">WRAP_CURRY_RIGHT_FLAG</a></li><li><a href="global.html#WRAP_FLIP_FLAG">WRAP_FLIP_FLAG</a></li><li><a href="global.html#WRAP_PARTIAL_FLAG">WRAP_PARTIAL_FLAG</a></li><li><a href="global.html#WRAP_PARTIAL_RIGHT_FLAG">WRAP_PARTIAL_RIGHT_FLAG</a></li><li><a href="global.html#WRAP_REARG_FLAG">WRAP_REARG_FLAG</a></li><li><a href="global.html#_advanceClusterTime">_advanceClusterTime</a></li><li><a href="global.html#_basePush">_basePush</a></li><li><a href="global.html#_checkContext">_checkContext</a></li><li><a href="global.html#_decorateUpdateWithVersionKey">_decorateUpdateWithVersionKey</a></li><li><a href="global.html#_filterInvalidIds">_filterInvalidIds</a></li><li><a href="global.html#_formatMatch">_formatMatch</a></li><li><a href="global.html#_getOption">_getOption</a></li><li><a href="global.html#_next">_next</a></li><li><a href="global.html#_orFailError">_orFailError</a></li><li><a href="global.html#_populate">_populate</a></li><li><a href="global.html#_toString">_toString</a></li><li><a href="global.html#_update">_update</a></li><li><a href="global.html#_updateExec">_updateExec</a></li><li><a href="global.html#_updateParentPopulated">_updateParentPopulated</a></li><li><a href="global.html#acceptParams">acceptParams</a></li><li><a href="global.html#addCursorFlag">addCursorFlag</a></li><li><a href="global.html#aliasFields">aliasFields</a></li><li><a href="global.html#alladdrs">alladdrs</a></li><li><a href="global.html#app">app</a></li><li><a href="global.html#append">append</a></li><li><a href="global.html#application">application</a></li><li><a href="global.html#applyGetters">applyGetters</a></li><li><a href="global.html#applyHooks">applyHooks</a></li><li><a href="global.html#applyQueryMethods">applyQueryMethods</a></li><li><a href="global.html#applyQueryMiddleware">applyQueryMiddleware</a></li><li><a href="global.html#applyRetryableWrites">applyRetryableWrites</a></li><li><a href="global.html#applySchemaTypeTransforms">applySchemaTypeTransforms</a></li><li><a href="global.html#applySession">applySession</a></li><li><a href="global.html#applyWriteConcern">applyWriteConcern</a></li><li><a href="global.html#arrayFlatten">arrayFlatten</a></li><li><a href="global.html#arrayProto">arrayProto</a></li><li><a href="global.html#arrayStrictEqual">arrayStrictEqual</a></li><li><a href="global.html#assert">assert</a></li><li><a href="global.html#assertUninitialized">assertUninitialized</a></li><li><a href="global.html#assignRawDocsToIdStructure">assignRawDocsToIdStructure</a></li><li><a href="global.html#asyncTag">asyncTag</a></li><li><a href="global.html#auth">auth</a></li><li><a href="global.html#base">base</a></li><li><a href="global.html#baseMinusTMin">baseMinusTMin</a></li><li><a href="global.html#basePath">basePath</a></li><li><a href="global.html#bidirectional_l">bidirectional_l</a></li><li><a href="global.html#bidirectional_r_al">bidirectional_r_al</a></li><li><a href="global.html#bigIntAndBufferInt64Check">bigIntAndBufferInt64Check</a></li><li><a href="global.html#binary2hex">binary2hex</a></li><li><a href="global.html#binaryToString">binaryToString</a></li><li><a href="global.html#body">body</a></li><li><a href="global.html#bodyParser">bodyParser</a></li><li><a href="global.html#boolTag">boolTag</a></li><li><a href="global.html#bson_1">bson_1</a></li><li><a href="global.html#buildCheckFunction">buildCheckFunction</a></li><li><a href="global.html#byteToHex">byteToHex</a></li><li><a href="global.html#bytes">bytes</a></li><li><a href="global.html#calculateCheckDigit">calculateCheckDigit</a></li><li><a href="global.html#calculateDurationInMs">calculateDurationInMs</a></li><li><a href="global.html#callSiteLocation">callSiteLocation</a></li><li><a href="global.html#castOps">castOps</a></li><li><a href="global.html#castUpdateVal">castUpdateVal</a></li><li><a href="global.html#charset">charset</a></li><li><a href="global.html#check">check</a></li><li><a href="global.html#checkCollectionName">checkCollectionName</a></li><li><a href="global.html#checkDivergentArray">checkDivergentArray</a></li><li><a href="global.html#checkEncoding">checkEncoding</a></li><li><a href="global.html#checkExact">checkExact</a></li><li><a href="global.html#checkLengthValue">checkLengthValue</a></li><li><a href="global.html#checkOffsetOrLengthValue">checkOffsetOrLengthValue</a></li><li><a href="global.html#checkOffsetValue">checkOffsetValue</a></li><li><a href="global.html">checkRequired</a></li><li><a href="global.html#checkSchema">checkSchema</a></li><li><a href="global.html#checkTLSOptions">checkTLSOptions</a></li><li><a href="global.html#checkTargetOffset">checkTargetOffset</a></li><li><a href="global.html#checkValidKey">checkValidKey</a></li><li><a href="global.html#clone">clone</a></li><li><a href="global.html#close">close</a></li><li><a href="global.html#coerce">coerce</a></li><li><a href="global.html#colors">colors</a></li><li><a href="global.html#commonly_mapped_to_nothing">commonly_mapped_to_nothing</a></li><li><a href="global.html#compareObjectId">compareObjectId</a></li><li><a href="global.html#compareTopologyVersion">compareTopologyVersion</a></li><li><a href="global.html#compile">compile</a></li><li><a href="global.html#compileETag">compileETag</a></li><li><a href="global.html#compileQueryParser">compileQueryParser</a></li><li><a href="global.html#compileTrust">compileTrust</a></li><li><a href="global.html#completeMany">completeMany</a></li><li><a href="global.html#completeOne">completeOne</a></li><li><a href="global.html#config">config</a></li><li><a href="global.html#consumeBody">consumeBody</a></li><li><a href="global.html#containsDotFile">containsDotFile</a></li><li><a href="global.html#containsNamespace">containsNamespace</a></li><li><a href="global.html#contentDisposition">contentDisposition</a></li><li><a href="global.html#contentRange">contentRange</a></li><li><a href="global.html#contentType">contentType</a></li><li><a href="global.html#contentstream">contentstream</a></li><li><a href="global.html#convert">convert</a></li><li><a href="global.html#convertBody">convertBody</a></li><li><a href="global.html#convertDataDescriptorToAccessor">convertDataDescriptorToAccessor</a></li><li><a href="global.html#convertNewToReturnDocument">convertNewToReturnDocument</a></li><li><a href="global.html#convertTo_id">convertTo_id</a></li><li><a href="global.html#cookie">cookie</a></li><li><a href="global.html#create">create</a></li><li><a href="global.html#createAndConnectServer">createAndConnectServer</a></li><li><a href="global.html#createApplication">createApplication</a></li><li><a href="global.html#createArgumentsString">createArgumentsString</a></li><li><a href="global.html#createBufferStream">createBufferStream</a></li><li><a href="global.html#createCheckSchema">createCheckSchema</a></li><li><a href="global.html#createCollection">createCollection</a></li><li><a href="global.html#createDebug">createDebug</a></li><li><a href="global.html#createError">createError</a></li><li><a href="global.html#createHeadersLenient">createHeadersLenient</a></li><li><a href="global.html#createModel">createModel</a></li><li><a href="global.html#createSize">createSize</a></li><li><a href="global.html#createStackString">createStackString</a></li><li><a href="global.html#createWritableStdioStream">createWritableStdioStream</a></li><li><a href="global.html#crypto">crypto</a></li><li><a href="global.html#databaseNamespace">databaseNamespace</a></li><li><a href="global.html#decideModelByObject">decideModelByObject</a></li><li><a href="global.html#decode">decode</a></li><li><a href="global.html#decorate">decorate</a></li><li><a href="global.html#decorateWithCollation">decorateWithCollation</a></li><li><a href="global.html#decorateWithExplain">decorateWithExplain</a></li><li><a href="global.html#decorateWithReadConcern">decorateWithReadConcern</a></li><li><a href="global.html#deepCopy">deepCopy</a></li><li><a href="global.html#deepEqual">deepEqual</a></li><li><a href="global.html#deepToMap">deepToMap</a></li><li><a href="global.html#defaultMessage">defaultMessage</a></li><li><a href="global.html#defineKey">defineKey</a></li><li><a href="global.html#depd">depd</a></li><li><a href="global.html#deprecate">deprecate</a></li><li><a href="global.html#destroy">destroy</a></li><li><a href="global.html#destroyServer">destroyServer</a></li><li><a href="global.html#dir">dir</a></li><li><a href="global.html#disable">disable</a></li><li><a href="global.html#domExcTag">domExcTag</a></li><li><a href="global.html#drainTimerQueue">drainTimerQueue</a></li><li><a href="global.html#dropCollection">dropCollection</a></li><li><a href="global.html#dropDatabase">dropDatabase</a></li><li><a href="global.html#dump">dump</a></li><li><a href="global.html#each">each</a></li><li><a href="global.html#eachAsync">eachAsync</a></li><li><a href="global.html#eachAsyncSeries">eachAsyncSeries</a></li><li><a href="global.html#emitWarning">emitWarning</a></li><li><a href="global.html#emitWarningOnce">emitWarningOnce</a></li><li><a href="global.html#enable">enable</a></li><li><a href="global.html#enabled">enabled</a></li><li><a href="global.html#encode">encode</a></li><li><a href="global.html#encodeUrl">encodeUrl</a></li><li><a href="global.html#enumToString">enumToString</a></li><li><a href="global.html#errorStrictEqual">errorStrictEqual</a></li><li><a href="global.html#errors">errors</a></li><li><a href="global.html#escapeHtml">escapeHtml</a></li><li><a href="global.html#etag">etag</a></li><li><a href="global.html#expires">expires</a></li><li><a href="global.html#exportNodeCompatibleHeaders">exportNodeCompatibleHeaders</a></li><li><a href="global.html#express">express</a></li><li><a href="global.html#extendedparser">extendedparser</a></li><li><a href="global.html#extension">extension</a></li><li><a href="global.html#extractCommand">extractCommand</a></li><li><a href="global.html#extractContentType">extractContentType</a></li><li><a href="global.html#family">family</a></li><li><a href="global.html#familySync">familySync</a></li><li><a href="global.html#fd">fd</a></li><li><a href="global.html#fetch">fetch</a></li><li><a href="global.html#fieldContentRegExp">fieldContentRegExp</a></li><li><a href="global.html#filterOptions">filterOptions</a></li><li><a href="global.html#finalhandler">finalhandler</a></li><li><a href="global.html#find">find</a></li><li><a href="global.html#findUnknownFields">findUnknownFields</a></li><li><a href="global.html#first">first</a></li><li><a href="global.html#flatten">flatten</a></li><li><a href="global.html#flattenForever">flattenForever</a></li><li><a href="global.html#flattenWithDepth">flattenWithDepth</a></li><li><a href="global.html#fmtLong">fmtLong</a></li><li><a href="global.html#fmtShort">fmtShort</a></li><li><a href="global.html#format">format</a></li><li><a href="global.html#formatArgs">formatArgs</a></li><li><a href="global.html#formatColor">formatColor</a></li><li><a href="global.html#formatLocation">formatLocation</a></li><li><a href="global.html#formatMessage">formatMessage</a></li><li><a href="global.html#formatPlain">formatPlain</a></li><li><a href="global.html#formatSort">formatSort</a></li><li><a href="global.html#formatters">formatters</a></li><li><a href="global.html#forwarded">forwarded</a></li><li><a href="global.html#freeExports">freeExports</a></li><li><a href="global.html#freeModule">freeModule</a></li><li><a href="global.html#freeParseFloat">freeParseFloat</a></li><li><a href="global.html#freeParseInt">freeParseInt</a></li><li><a href="global.html#fresh">fresh</a></li><li><a href="global.html#funcProto">funcProto</a></li><li><a href="global.html#funcToString">funcToString</a></li><li><a href="global.html#get">get</a></li><li><a href="global.html#getCharset">getCharset</a></li><li><a href="global.html#getFormatFunction">getFormatFunction</a></li><li><a href="global.html#getIndexes">getIndexes</a></li><li><a href="global.html#getMongoDBClientEncryption">getMongoDBClientEncryption</a></li><li><a href="global.html#getNodeRequestOptions">getNodeRequestOptions</a></li><li><a href="global.html#getOutputLength">getOutputLength</a></li><li><a href="global.html#getPositionWeightThroughLengthAndIndex">getPositionWeightThroughLengthAndIndex</a></li><li><a href="global.html#getPositionalPathType">getPositionalPathType</a></li><li><a href="global.html#getRawBody">getRawBody</a></li><li><a href="global.html#getStack">getStack</a></li><li><a href="global.html#getTopology">getTopology</a></li><li><a href="global.html#getTotalBytes">getTotalBytes</a></li><li><a href="global.html#getValue">getValue</a></li><li><a href="global.html#getcontenttype">getcontenttype</a></li><li><a href="global.html#handle$in">handle$in</a></li><li><a href="global.html#handleAtomics">handleAtomics</a></li><li><a href="global.html#handleSingle">handleSingle</a></li><li><a href="global.html#has">has</a></li><li><a href="global.html#hasAtomicOperators">hasAtomicOperators</a></li><li><a href="global.html#hasKey">hasKey</a></li><li><a href="global.html#hasOwnProperty">hasOwnProperty</a></li><li><a href="global.html#hasSessionSupport">hasSessionSupport</a></li><li><a href="global.html#hasValidIbanChecksum">hasValidIbanChecksum</a></li><li><a href="global.html#hasValidIbanFormat">hasValidIbanFormat</a></li><li><a href="global.html#hasbody">hasbody</a></li><li><a href="global.html#header">header</a></li><li><a href="global.html#hex2buffer">hex2buffer</a></li><li><a href="global.html#http">http</a></li><li><a href="global.html#ibanRegexThroughCountryCode">ibanRegexThroughCountryCode</a></li><li><a href="global.html#idCounter">idCounter</a></li><li><a href="global.html#idGetter">idGetter</a></li><li><a href="global.html#inherits">inherits</a></li><li><a href="global.html#init">init</a></li><li><a href="global.html#initialize">initialize</a></li><li><a href="global.html#inspectOpts">inspectOpts</a></li><li><a href="global.html#inspectable">inspectable</a></li><li><a href="global.html#inspectorLog">inspectorLog</a></li><li><a href="global.html#invalidTokenRegex">invalidTokenRegex</a></li><li><a href="global.html#isAbsolute">isAbsolute</a></li><li><a href="global.html#isArgumentsObject">isArgumentsObject</a></li><li><a href="global.html#isBlob">isBlob</a></li><li><a href="global.html#isBsonType">isBsonType</a></li><li><a href="global.html#isCanadianSIN">isCanadianSIN</a></li><li><a href="global.html#isEAN">isEAN</a></li><li><a href="global.html#isEmptyObject">isEmptyObject</a></li><li><a href="global.html#isFinished">isFinished</a></li><li><a href="global.html#isFiniteInteger">isFiniteInteger</a></li><li><a href="global.html#isHello">isHello</a></li><li><a href="global.html#isInteger">isInteger</a></li><li><a href="global.html#isMeta">isMeta</a></li><li><a href="global.html#isMongooseType">isMongooseType</a></li><li><a href="global.html#isNativeObject">isNativeObject</a></li><li><a href="global.html#isNonBuiltinObject">isNonBuiltinObject</a></li><li><a href="global.html#isNonGlibcLinux">isNonGlibcLinux</a></li><li><a href="global.html#isNonGlibcLinuxSync">isNonGlibcLinuxSync</a></li><li><a href="global.html#isNullOrUndefined">isNullOrUndefined</a></li><li><a href="global.html#isObject">isObject</a></li><li><a href="global.html#isObjectIdOrHexString">isObjectIdOrHexString</a></li><li><a href="global.html#isOperator">isOperator</a></li><li><a href="global.html#isPOJO">isPOJO</a></li><li><a href="global.html#isPair">isPair</a></li><li><a href="global.html#isPassportNumber">isPassportNumber</a></li><li><a href="global.html#isPopulatedObject">isPopulatedObject</a></li><li><a href="global.html#isPromiseLike">isPromiseLike</a></li><li><a href="global.html#isRequest">isRequest</a></li><li><a href="global.html#isRetryableReadError">isRetryableReadError</a></li><li><a href="global.html#isRetryableWritesEnabled">isRetryableWritesEnabled</a></li><li><a href="global.html#isSDAMUnrecoverableError">isSDAMUnrecoverableError</a></li><li><a href="global.html#isSameProtocol">isSameProtocol</a></li><li><a href="global.html#isURLSearchParams">isURLSearchParams</a></li><li><a href="global.html#isValidObjectId">isValidObjectId</a></li><li><a href="global.html#isValidSocksProxy">isValidSocksProxy</a></li><li><a href="global.html#isValidSocksRemoteHost">isValidSocksRemoteHost</a></li><li><a href="global.html#isValidTimeoutValue">isValidTimeoutValue</a></li><li><a href="global.html#isignored">isignored</a></li><li><a href="global.html#isstats">isstats</a></li><li><a href="global.html#istraced">istraced</a></li><li><a href="global.html#iter">iter</a></li><li><a href="global.html#json">json</a></li><li><a href="global.html#kAutoEncrypter">kAutoEncrypter</a></li><li><a href="global.html#kBeforeHandshake">kBeforeHandshake</a></li><li><a href="global.html#kBuffer">kBuffer</a></li><li><a href="global.html#kBuiltOptions">kBuiltOptions</a></li><li><a href="global.html#kCancellationToken">kCancellationToken</a></li><li><a href="global.html#kCancelled">kCancelled</a></li><li><a href="global.html#kCheckedOut">kCheckedOut</a></li><li><a href="global.html#kClient">kClient</a></li><li><a href="global.html#kClosed">kClosed</a></li><li><a href="global.html#kClusterTime">kClusterTime</a></li><li><a href="global.html#kConnection">kConnection</a></li><li><a href="global.html#kConnectionCounter">kConnectionCounter</a></li><li><a href="global.html#kConnections">kConnections</a></li><li><a href="global.html#kCursorStream">kCursorStream</a></li><li><a href="global.html#kDelayedTimeoutId">kDelayedTimeoutId</a></li><li><a href="global.html#kDescription">kDescription</a></li><li><a href="global.html#kDocuments">kDocuments</a></li><li><a href="global.html#kErrorLabels">kErrorLabels</a></li><li><a href="global.html#kFilter">kFilter</a></li><li><a href="global.html#kGeneration">kGeneration</a></li><li><a href="global.html#kHello">kHello</a></li><li><a href="global.html#kId">kId</a></li><li><a href="global.html#kInit">kInit</a></li><li><a href="global.html#kInitialized">kInitialized</a></li><li><a href="global.html#kInternalClient">kInternalClient</a></li><li><a href="global.html#kKilled">kKilled</a></li><li><a href="global.html#kLastUseTime">kLastUseTime</a></li><li><a href="global.html#kMessageStream">kMessageStream</a></li><li><a href="global.html#kMetrics">kMetrics</a></li><li><a href="global.html#kMinPoolSizeTimer">kMinPoolSizeTimer</a></li><li><a href="global.html#kMode">kMode</a></li><li><a href="global.html#kMonitor">kMonitor</a></li><li><a href="global.html#kMonitorId">kMonitorId</a></li><li><a href="global.html#kNamespace">kNamespace</a></li><li><a href="global.html#kNumReturned">kNumReturned</a></li><li><a href="global.html#kOptions">kOptions</a></li><li><a href="global.html#kPending">kPending</a></li><li><a href="global.html#kPinnedConnection">kPinnedConnection</a></li><li><a href="global.html#kPipeline">kPipeline</a></li><li><a href="global.html#kPoolState">kPoolState</a></li><li><a href="global.html#kProcessingWaitQueue">kProcessingWaitQueue</a></li><li><a href="global.html#kQueue">kQueue</a></li><li><a href="global.html#kRTTPinger">kRTTPinger</a></li><li><a href="global.html#kRoundTripTime">kRoundTripTime</a></li><li><a href="global.html#kServer">kServer</a></li><li><a href="global.html#kServerError">kServerError</a></li><li><a href="global.html#kServerSession">kServerSession</a></li><li><a href="global.html#kServiceGenerations">kServiceGenerations</a></li><li><a href="global.html#kSession">kSession</a></li><li><a href="global.html#kSnapshotEnabled">kSnapshotEnabled</a></li><li><a href="global.html#kSnapshotTime">kSnapshotTime</a></li><li><a href="global.html#kStream">kStream</a></li><li><a href="global.html#kTransform">kTransform</a></li><li><a href="global.html#kTxnNumberIncrement">kTxnNumberIncrement</a></li><li><a href="global.html#kWaitQueue">kWaitQueue</a></li><li><a href="global.html#keys">keys</a></li><li><a href="global.html#last">last</a></li><li><a href="global.html#latencyWindowReducer">latencyWindowReducer</a></li><li><a href="global.html#load">load</a></li><li><a href="global.html#localstorage">localstorage</a></li><li><a href="global.html#log">log</a></li><li><a href="global.html#lookup">lookup</a></li><li><a href="global.html#makeCounter">makeCounter</a></li><li><a href="global.html#makeLean">makeLean</a></li><li><a href="global.html#makeStateMachine">makeStateMachine</a></li><li><a href="global.html#mapTag">mapTag</a></li><li><a href="global.html#mapToMap">mapToMap</a></li><li><a href="global.html#mapping2nothing">mapping2nothing</a></li><li><a href="global.html#mapping2space">mapping2space</a></li><li><a href="global.html#matchedData">matchedData</a></li><li><a href="global.html#matchesParentDomain">matchesParentDomain</a></li><li><a href="global.html#maxInt">maxInt</a></li><li><a href="global.html#maxStalenessReducer">maxStalenessReducer</a></li><li><a href="global.html#maxWireVersion">maxWireVersion</a></li><li><a href="global.html#maybeRemoveId">maybeRemoveId</a></li><li><a href="global.html#merge">merge</a></li><li><a href="global.html#mergeBatchResults">mergeBatchResults</a></li><li><a href="global.html#mergeClone">mergeClone</a></li><li><a href="global.html#mergeOptions">mergeOptions</a></li><li><a href="global.html#methods">methods</a></li><li><a href="global.html#mime">mime</a></li><li><a href="global.html#minimize">minimize</a></li><li><a href="global.html#mockS3Http">mockS3Http</a></li><li><a href="global.html#model">model</a></li><li><a href="global.html#moduleExports">moduleExports</a></li><li><a href="global.html#mongoose">mongoose</a></li><li><a href="global.html#morgan">morgan</a></li><li><a href="global.html#mpath">mpath</a></li><li><a href="global.html#multilineRegexp">multilineRegexp</a></li><li><a href="global.html#names">names</a></li><li><a href="global.html#nativeObjectToString">nativeObjectToString</a></li><li><a href="global.html#newObject">newObject</a></li><li><a href="global.html#next">next</a></li><li><a href="global.html#noCastOps">noCastOps</a></li><li><a href="global.html#noPasswordAuthMechanisms">noPasswordAuthMechanisms</a></li><li><a href="global.html#non_ASCII_space_characters">non_ASCII_space_characters</a></li><li><a href="global.html#normalizeHintField">normalizeHintField</a></li><li><a href="global.html#normalizeJsonSyntaxError">normalizeJsonSyntaxError</a></li><li><a href="global.html#normalizeType">normalizeType</a></li><li><a href="global.html#normalizeTypes">normalizeTypes</a></li><li><a href="global.html#notImplemented">notImplemented</a></li><li><a href="global.html#now">now</a></li><li><a href="global.html#ns">ns</a></li><li><a href="global.html#numberOps">numberOps</a></li><li><a href="global.html#numberTag">numberTag</a></li><li><a href="global.html#object">object</a></li><li><a href="global.html#objectCtorString">objectCtorString</a></li><li><a href="global.html#objectProto">objectProto</a></li><li><a href="global.html#objectTag">objectTag</a></li><li><a href="global.html#objectToMap">objectToMap</a></li><li><a href="global.html#onFinished">onFinished</a></li><li><a href="global.html#onHeaders">onHeaders</a></li><li><a href="global.html#oneOf">oneOf</a></li><li><a href="global.html#operand">operand</a></li><li><a href="global.html#options">options</a></li><li><a href="global.html#originalurl">originalurl</a></li><li><a href="global.html#overwriteMiddlewareResult">overwriteMiddlewareResult</a></li><li><a href="global.html#pairToMap">pairToMap</a></li><li><a href="global.html#param">param</a></li><li><a href="global.html#paramRegExp">paramRegExp</a></li><li><a href="global.html#parameterCount">parameterCount</a></li><li><a href="global.html#parentArray">parentArray</a></li><li><a href="global.html#parse">parse</a></li><li><a href="global.html#parseSeverityFromString">parseSeverityFromString</a></li><li><a href="global.html#parseURL">parseURL</a></li><li><a href="global.html#parser">parser</a></li><li><a href="global.html#parsers">parsers</a></li><li><a href="global.html#parseurl">parseurl</a></li><li><a href="global.html#passport">passport</a></li><li><a href="global.html#passportRegexByCountryCode">passportRegexByCountryCode</a></li><li><a href="global.html#pathtoRegexp">pathtoRegexp</a></li><li><a href="global.html#pause">pause</a></li><li><a href="global.html#plural">plural</a></li><li><a href="global.html#pluralization">pluralization</a></li><li><a href="global.html#pluralize">pluralize</a></li><li><a href="global.html#populate">populate</a></li><li><a href="global.html#port">port</a></li><li><a href="global.html#preferredCharsets">preferredCharsets</a></li><li><a href="global.html#preferredEncodings">preferredEncodings</a></li><li><a href="global.html#preferredLanguages">preferredLanguages</a></li><li><a href="global.html#preferredMediaTypes">preferredMediaTypes</a></li><li><a href="global.html#prepareDirection">prepareDirection</a></li><li><a href="global.html#prepareDiscriminatorCriteria">prepareDiscriminatorCriteria</a></li><li><a href="global.html#prepareHandshakeDocument">prepareHandshakeDocument</a></li><li><a href="global.html#prepareObjectStackTrace">prepareObjectStackTrace</a></li><li><a href="global.html#preparePopulationOptions">preparePopulationOptions</a></li><li><a href="global.html#preparePopulationOptionsMQ">preparePopulationOptionsMQ</a></li><li><a href="global.html#prevTime">prevTime</a></li><li><a href="global.html#prog">prog</a></li><li><a href="global.html#prohibited_characters">prohibited_characters</a></li><li><a href="global.html#propertyIsEnumerable">propertyIsEnumerable</a></li><li><a href="global.html#proto">proto</a></li><li><a href="global.html#proxyaddr">proxyaddr</a></li><li><a href="global.html#punycode">punycode</a></li><li><a href="global.html#qescRegExp">qescRegExp</a></li><li><a href="global.html#qstring">qstring</a></li><li><a href="global.html#query">query</a></li><li><a href="global.html#quoteRegExp">quoteRegExp</a></li><li><a href="global.html#range">range</a></li><li><a href="global.html#rangeParser">rangeParser</a></li><li><a href="global.html#raw">raw</a></li><li><a href="global.html#reComboMark">reComboMark</a></li><li><a href="global.html#reEmptyStringLeading">reEmptyStringLeading</a></li><li><a href="global.html#reEsTemplate">reEsTemplate</a></li><li><a href="global.html#reEscapedHtml">reEscapedHtml</a></li><li><a href="global.html#reFlags">reFlags</a></li><li><a href="global.html#reForbiddenIdentifierChars">reForbiddenIdentifierChars</a></li><li><a href="global.html#reIsBadHex">reIsBadHex</a></li><li><a href="global.html#reIsBinary">reIsBinary</a></li><li><a href="global.html#reIsOctal">reIsOctal</a></li><li><a href="global.html#reLatin">reLatin</a></li><li><a href="global.html#reNoMatch">reNoMatch</a></li><li><a href="global.html#reRegExpChar">reRegExpChar</a></li><li><a href="global.html#reTrimStart">reTrimStart</a></li><li><a href="global.html#reUnescapedHtml">reUnescapedHtml</a></li><li><a href="global.html#reUnescapedString">reUnescapedString</a></li><li><a href="global.html#read">read</a></li><li><a href="global.html#readConcern">readConcern</a></li><li><a href="global.html#readPref">readPref</a></li><li><a href="global.html#readPreferenceServerSelector">readPreferenceServerSelector</a></li><li><a href="global.html#readStream">readStream</a></li><li><a href="global.html#reconstructFieldPath">reconstructFieldPath</a></li><li><a href="global.html#regexPunycode">regexPunycode</a></li><li><a href="global.html#registerRemoveListener">registerRemoveListener</a></li><li><a href="global.html#relative">relative</a></li><li><a href="global.html#removedMiddlewares">removedMiddlewares</a></li><li><a href="global.html#req">req</a></li><li><a href="global.html#res">res</a></li><li><a href="global.html#resolveBSONOptions">resolveBSONOptions</a></li><li><a href="global.html#resolveLogPath">resolveLogPath</a></li><li><a href="global.html#resolveOptions">resolveOptions</a></li><li><a href="global.html#resolveSRVRecord">resolveSRVRecord</a></li><li><a href="global.html#rewind">rewind</a></li><li><a href="global.html#rsCombo">rsCombo</a></li><li><a href="global.html#rsComboMarksRange">rsComboMarksRange</a></li><li><a href="global.html#runAllChains">runAllChains</a></li><li><a href="global.html#runValidatorsOnUpdate">runValidatorsOnUpdate</a></li><li><a href="global.html#s">s</a></li><li><a href="global.html#sameServerSelector">sameServerSelector</a></li><li><a href="global.html#sanitizeFilter">sanitizeFilter</a></li><li><a href="global.html#saslprep">saslprep</a></li><li><a href="global.html#save">save</a></li><li><a href="global.html#scopePaths">scopePaths</a></li><li><a href="global.html#secondaryWritableServerSelector">secondaryWritableServerSelector</a></li><li><a href="global.html#selectColor">selectColor</a></li><li><a href="global.html#semanticVersioningRegex">semanticVersioningRegex</a></li><li><a href="global.html#send">send</a></li><li><a href="global.html#serialize">serialize</a></li><li><a href="global.html#serveStatic">serveStatic</a></li><li><a href="global.html#set">set</a></li><li><a href="global.html#setCharset">setCharset</a></li><li><a href="global.html#setDefaultsOnInsert">setDefaultsOnInsert</a></li><li><a href="global.html#setDifference">setDifference</a></li><li><a href="global.html#setValue">setValue</a></li><li><a href="global.html#setup">setup</a></li><li><a href="global.html#sha1">sha1</a></li><li><a href="global.html#shouldSkipVersioning">shouldSkipVersioning</a></li><li><a href="global.html#shuffle">shuffle</a></li><li><a href="global.html#shuffleArray">shuffleArray</a></li><li><a href="global.html#sign">sign</a></li><li><a href="global.html#simpleparser">simpleparser</a></li><li><a href="global.html#skipMiddlewareFunction">skipMiddlewareFunction</a></li><li><a href="global.html#special">special</a></li><li><a href="global.html#splitType">splitType</a></li><li><a href="global.html#startSession">startSession</a></li><li><a href="global.html#status">status</a></li><li><a href="global.html#strategies">strategies</a></li><li><a href="global.html#stringTag">stringTag</a></li><li><a href="global.html#stringToBinary">stringToBinary</a></li><li><a href="global.html#stringToPath">stringToPath</a></li><li><a href="global.html#stringsToMap">stringsToMap</a></li><li><a href="global.html#subtypeNameRegExp">subtypeNameRegExp</a></li><li><a href="global.html#supportsRetryableWrites">supportsRetryableWrites</a></li><li><a href="global.html#symIterator">symIterator</a></li><li><a href="global.html#symbolTag">symbolTag</a></li><li><a href="global.html#tagSetMatch">tagSetMatch</a></li><li><a href="global.html#tagSetReducer">tagSetReducer</a></li><li><a href="global.html#text">text</a></li><li><a href="global.html#tick">tick</a></li><li><a href="global.html#toCodePoints">toCodePoints</a></li><li><a href="global.html#toCollectionName">toCollectionName</a></li><li><a href="global.html#toIdentifier">toIdentifier</a></li><li><a href="global.html#toObject">toObject</a></li><li><a href="global.html#token">token</a></li><li><a href="global.html#topologyTypeFromOptions">topologyTypeFromOptions</a></li><li><a href="global.html#transaction">transaction</a></li><li><a href="global.html#traverse">traverse</a></li><li><a href="global.html#trusted">trusted</a></li><li><a href="global.html#tty">tty</a></li><li><a href="global.html#typeChecker">typeChecker</a></li><li><a href="global.html#typeOf">typeOf</a></li><li><a href="global.html#typeis">typeis</a></li><li><a href="global.html#typeofrequest">typeofrequest</a></li><li><a href="global.html#unassigned_code_points">unassigned_code_points</a></li><li><a href="global.html#uncountables">uncountables</a></li><li><a href="global.html#unpipe">unpipe</a></li><li><a href="global.html#unset">unset</a></li><li><a href="global.html#unsign">unsign</a></li><li><a href="global.html#updateServers">updateServers</a></li><li><a href="global.html#urlencoded">urlencoded</a></li><li><a href="global.html#useColors">useColors</a></li><li><a href="global.html#utils">utils</a></li><li><a href="global.html#uuidV4">uuidV4</a></li><li><a href="global.html#validateDisplayName">validateDisplayName</a></li><li><a href="global.html#validateLoadBalancedOptions">validateLoadBalancedOptions</a></li><li><a href="global.html#validateSocksClientChainOptions">validateSocksClientChainOptions</a></li><li><a href="global.html#validateSocksClientOptions">validateSocksClientOptions</a></li><li><a href="global.html#validationResult">validationResult</a></li><li><a href="global.html#valueFilter">valueFilter</a></li><li><a href="global.html#vary">vary</a></li><li><a href="global.html#version">version</a></li><li><a href="global.html#versionSync">versionSync</a></li><li><a href="global.html#walkKeyPathValues">walkKeyPathValues</a></li><li><a href="global.html#walkUpdatePath">walkUpdatePath</a></li><li><a href="global.html#weakMapTag">weakMapTag</a></li><li><a href="global.html#weakSetTag">weakSetTag</a></li><li><a href="global.html#wetag">wetag</a></li><li><a href="global.html#withDefaults">withDefaults</a></li><li><a href="global.html#wrapfunction">wrapfunction</a></li><li><a href="global.html#wrapproperty">wrapproperty</a></li><li><a href="global.html#writableServerSelector">writableServerSelector</a></li><li><a href="global.html#writeToStream">writeToStream</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 4.0.2</a> on Thu Aug 31 2023 18:32:22 GMT+0100 (British Summer Time)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>